
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.app.gramaticas.sqlkv;
import java_cup.runtime.*;
import java.util.*;

import com.app.gramaticas.Errorx;
import com.app.gramaticas.Reporte;
import com.app.recursosdb.registro.Registro;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\004\012\000\002\004" +
    "\012\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\003" +
    "\002\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\006\037\001\002\000" +
    "\004\006\012\001\002\000\004\007\013\001\002\000\012" +
    "\011\020\012\015\013\017\014\016\001\002\000\022\015" +
    "\023\016\022\017\024\020\030\021\025\022\021\023\031" +
    "\024\027\001\002\000\022\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\022" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\001\002\000\022\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\001\002\000" +
    "\022\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\001\002\000\010\002\ufff5\025\ufff5\026" +
    "\ufff5\001\002\000\010\002\ufff9\025\ufff9\026\ufff9\001\002" +
    "\000\010\002\ufffa\025\ufffa\026\ufffa\001\002\000\010\002" +
    "\ufff8\025\ufff8\026\ufff8\001\002\000\010\002\ufff6\025\ufff6" +
    "\026\ufff6\001\002\000\010\002\ufff2\025\033\026\034\001" +
    "\002\000\010\002\ufff3\025\ufff3\026\ufff3\001\002\000\010" +
    "\002\ufff7\025\ufff7\026\ufff7\001\002\000\010\002\ufff4\025" +
    "\ufff4\026\ufff4\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufff1\001\002\000\004\027\035\001\002\000\004\026" +
    "\036\001\002\000\004\002\ufff0\001\002\000\004\007\040" +
    "\001\002\000\012\011\020\012\015\013\017\014\016\001" +
    "\002\000\022\015\023\016\022\017\024\020\030\021\025" +
    "\022\021\023\031\024\027\001\002\000\010\002\ufff2\025" +
    "\033\026\034\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\004\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\013\001\001\000\004\006\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\040\001\001\000\004\006\041\001\001\000\004\003" +
    "\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    } 

    private List<Registro> registros = new ArrayList<Registro>();

    // reportes a enviar
    private List <String> reportes = new ArrayList<String>();

    public List<Registro> getRegistro(){
        return registros;
    }

    public void setRegistro(List<Registro> registro){
        this.registros = registro;
    }
    
    public List<String> getReportes(){
        return reportes;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= SELECCIONAR REPORTE id FILTRAR POR campo operador comparacion 
            {
              Object RESULT =null;
		int campleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int campright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object camp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object compar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		






              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= SELECCIONAR REPORTE ID FILTRAR POR campo operador comparacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int campleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int campright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object camp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object compar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

switch ((String) oper) {
    case "<":

    switch ((String) camp) {

        case "TIEMPO":

        for(Registro r : registros){
          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
        }

       
          
            break; 

        case "USUARIO":
    
        Errorx errora = new Errorx("Sintactico", "Error en la linea " + idleft + " Columna " + idright, "No se esperaba: " + id, idleft, idright);
        Reporte.getListaErrores().add(errora);
    
            break; // Salir del switch

        case "PUNTEO":
           
        for(Registro r : registros){
          if (r.getIdTrivia().equals((String) compar)){
            if (r.getPunteo() < (int) compar){
         reportes.add(r.toString());
       }
       }
        }

            break; // Salir del switch

        case "TRIVIA":

        Errorx error = new Errorx("Sintactico", "Error en la linea " + idleft + " Columna " + idright, "No se esperaba: " + id, idleft, idright);
        Reporte.getListaErrores().add(error);

            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    
        break; 
    case ">":

        switch ((String) camp) {

        case "TIEMPO":
        
        for(Registro r : registros){
          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() > (int) compar){
         reportes.add(r.toString());
       }
       }
          }

            break; // Salir del switch

        case "USUARIO":

        Errorx error = new Errorx("Sintactico", "Error en la linea " + idleft + " Columna " + idright, "No se esperaba: " + id, idleft, idright);
        Reporte.getListaErrores().add(error);
       
            break; // Salir del switch

        case "PUNTEO":

        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getPunteo() > (int) compar){
         reportes.add(r.toString());
       }
       }
          
          }
            break; // Salir del switch

        case "TRIVIA":

        Errorx errora = new Errorx("Sintactico", "Error en la linea " + idleft + " Columna " + idright, "No se esperaba: " + id, idleft, idright);
        Reporte.getListaErrores().add(errora);


            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    

        break; 
    
    case "=":
        switch ((String) camp) {

        case "TIEMPO":
        for(Registro r : registros){
          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() == (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            
            break; // Salir del switch

        case "USUARIO":
      
        Errorx error = new Errorx("Sintactico", "Error en la linea " + idleft + " Columna " + idright, "No se esperaba: " + id, idleft, idright);
        Reporte.getListaErrores().add(error);
        
            break; // Salir del switch

        case "PUNTEO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getPunteo() == (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "TRIVIA":
    
        Errorx errora = new Errorx("Sintactico", "Error en la linea " + idleft + " Columna " + idright, "No se esperaba: " + id, idleft, idright);
        Reporte.getListaErrores().add(errora);

            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    
        
        break; 

    case ">=":
        switch ((String)camp) {

        case "TIEMPO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "USUARIO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "PUNTEO":
        for(Registro r : registros){
          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "TRIVIA":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }

            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    
        
        break; 

    case "<=":
        switch ((String)camp) {

        case "TIEMPO":
        for(Registro r : registros){
          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "USUARIO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
        
            break; // Salir del switch

        case "PUNTEO":
        
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "TRIVIA":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }

            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    

        break; 

    case "AND":
        switch ((String)camp) {

        case "TIEMPO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "USUARIO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "PUNTEO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "TRIVIA":

        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      }
            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    

        break; 

    case "OR":
        switch ((String)camp) {

        case "TIEMPO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "USUARIO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "PUNTEO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "TRIVIA":

        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    
        
        break; 

    case "NOT":
        
            switch ((String)camp) {

        case "TIEMPO":
        
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "USUARIO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        case "PUNTEO":
        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      }
            break; // Salir del switch

        case "TRIVIA":

        for(Registro r : registros){

          if (r.getIdTrivia().equals((String) compar)){
            if (r.getTiempo() < (int) compar){
         reportes.add(r.toString());
       }
       }
      
      }
            break; // Salir del switch

        default:
            // Bloque de código si no coincide con ningún caso
            break; // Opcional, pero recomendado
    }
    
        
        break; // Salir del switch

    

    default:
        // Bloque de código si no coincide con ningún caso
        break; // Opcional, pero recomendado
}

                
             


             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // campo ::= TIEMPO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=tmp ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // campo ::= USUARIO 
            {
              Object RESULT =null;
		int usuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int usuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object usu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=usu ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // campo ::= PUNTEO 
            {
              Object RESULT =null;
		int puntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=punt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // campo ::= TRIVIA 
            {
              Object RESULT =null;
		int trivleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trivright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object triv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=triv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("campo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operador ::= MENOR_QUE 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operador ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operador ::= IGUAL 
            {
              Object RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int igright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ig; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operador ::= MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;
		int maqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object maq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=maq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operador ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;
		int meqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object meq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=meq; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operador ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=and; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operador ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=or; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operador ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= not; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comparacion ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comparacion ::= VALOR_NUMERICO 
            {
              Object RESULT =null;
		int ableft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int abright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ab = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ab;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comparacion ::= COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ns;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
