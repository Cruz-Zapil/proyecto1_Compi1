
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.app.gramaticas.xson;

import java_cup.runtime.*;
import com.google.common.collect.Multimap;
import com.app.gramaticas.Errorx;
import com.app.gramaticas.Reporte;
import com.google.common.collect.ArrayListMultimap;
import com.app.recursos.MetodoTrivia;
import com.app.recursos.MetodoUsuario;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserXson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public parserXson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserXson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserXson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\011\000\002\003" +
    "\006\000\002\003\003\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\004\015\000\002\004\015\000" +
    "\002\004\015\000\002\004\015\000\002\004\015\000\002" +
    "\004\015\000\002\004\015\000\002\004\015\000\002\004" +
    "\015\000\002\004\015\000\002\004\005\000\002\006\015" +
    "\000\002\007\003\000\002\007\005\000\002\010\011\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\004\000\002\011\015\000\002\012" +
    "\003\000\002\012\005\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\004\000\002\014\015\000\002\015\003\000\002" +
    "\015\005\000\002\016\011\000\002\016\004\000\002\017" +
    "\015\000\002\020\003\000\002\020\005\000\002\021\011" +
    "\000\002\021\011\000\002\021\004\000\002\022\015\000" +
    "\002\023\003\000\002\023\005\000\002\024\011\000\002" +
    "\024\007\000\002\024\011\000\002\024\011\000\002\024" +
    "\011\000\002\024\011\000\002\024\003\000\002\025\015" +
    "\000\002\026\003\000\002\026\005\000\002\027\011\000" +
    "\002\027\003\000\002\030\015\000\002\031\003\000\002" +
    "\031\005\000\002\032\011\000\002\032\007\000\002\032" +
    "\011\000\002\032\011\000\002\032\003\000\002\033\015" +
    "\000\002\034\003\000\002\034\005\000\002\035\011\000" +
    "\002\035\011\000\002\035\011\000\002\035\011\000\002" +
    "\035\011\000\002\035\011\000\002\035\007\000\002\035" +
    "\007\000\002\035\003\000\002\042\015\000\002\043\003" +
    "\000\002\043\005\000\002\044\011\000\002\044\011\000" +
    "\002\044\011\000\002\044\007\000\002\044\011\000\002" +
    "\044\011\000\002\044\011\000\002\044\007\000\002\044" +
    "\007\000\002\044\003\000\002\037\015\000\002\040\003" +
    "\000\002\040\005\000\002\041\011\000\002\041\011\000" +
    "\002\041\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\004\021\005\001\002\000\004\002\u0206\001" +
    "\002\000\004\014\006\001\002\000\004\015\007\001\002" +
    "\000\004\017\010\001\002\000\004\013\011\001\002\000" +
    "\004\022\012\001\002\000\006\003\014\020\015\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\ufffd\001\002\000" +
    "\010\024\017\025\020\027\021\001\002\000\004\002\000" +
    "\001\002\000\004\022\u01ff\001\002\000\004\011\023\001" +
    "\002\000\004\022\022\001\002\000\010\002\ufff0\003\ufff0" +
    "\020\ufff0\001\002\000\004\004\024\001\002\000\026\030" +
    "\033\037\026\043\025\044\035\047\031\053\036\054\030" +
    "\055\034\064\027\065\032\001\002\000\004\004\u01e2\001" +
    "\002\000\004\004\u01ad\001\002\000\004\004\u018b\001\002" +
    "\000\004\004\u015f\001\002\000\004\004\u0127\001\002\000" +
    "\004\004\341\001\002\000\004\004\254\001\002\000\004" +
    "\004\136\001\002\000\004\004\073\001\002\000\004\004" +
    "\037\001\002\000\004\022\040\001\002\000\004\005\042" +
    "\001\002\000\004\021\070\001\002\000\004\004\043\001" +
    "\002\000\004\045\044\001\002\000\004\004\045\001\002" +
    "\000\004\011\046\001\002\000\004\007\047\001\002\000" +
    "\004\005\050\001\002\000\006\003\053\004\054\001\002" +
    "\000\006\006\064\012\063\001\002\000\006\006\uffc7\012" +
    "\uffc7\001\002\000\006\006\uffc4\012\uffc4\001\002\000\004" +
    "\046\055\001\002\000\004\004\056\001\002\000\004\011" +
    "\057\001\002\000\004\004\060\001\002\000\004\104\061" +
    "\001\002\000\004\004\062\001\002\000\006\006\uffc5\012" +
    "\uffc5\001\002\000\006\003\053\004\054\001\002\000\004" +
    "\010\065\001\002\000\004\006\066\001\002\000\004\021" +
    "\uffc8\001\002\000\006\006\uffc6\012\uffc6\001\002\000\004" +
    "\026\071\001\002\000\004\023\072\001\002\000\010\002" +
    "\ufff5\003\ufff5\020\ufff5\001\002\000\004\022\074\001\002" +
    "\000\004\005\076\001\002\000\004\021\133\001\002\000" +
    "\004\004\077\001\002\000\004\031\100\001\002\000\004" +
    "\004\101\001\002\000\004\011\102\001\002\000\004\007" +
    "\103\001\002\000\004\005\104\001\002\000\006\003\106" +
    "\004\110\001\002\000\006\006\uffd7\012\uffd7\001\002\000" +
    "\006\003\106\004\110\001\002\000\006\006\126\012\125" +
    "\001\002\000\006\032\111\033\112\001\002\000\004\004" +
    "\120\001\002\000\004\004\113\001\002\000\004\011\114" +
    "\001\002\000\004\004\115\001\002\000\004\101\116\001" +
    "\002\000\004\004\117\001\002\000\006\006\uffd4\012\uffd4" +
    "\001\002\000\004\011\121\001\002\000\004\004\122\001" +
    "\002\000\004\101\123\001\002\000\004\004\124\001\002" +
    "\000\006\006\uffd5\012\uffd5\001\002\000\006\003\106\004" +
    "\110\001\002\000\004\010\127\001\002\000\004\006\130" +
    "\001\002\000\004\021\uffd8\001\002\000\006\006\uffd6\012" +
    "\uffd6\001\002\000\006\006\uffd3\012\uffd3\001\002\000\004" +
    "\026\134\001\002\000\004\023\135\001\002\000\010\002" +
    "\ufff7\003\ufff7\020\ufff7\001\002\000\004\022\137\001\002" +
    "\000\004\005\141\001\002\000\004\021\251\001\002\000" +
    "\004\004\142\001\002\000\004\056\143\001\002\000\004" +
    "\004\144\001\002\000\004\011\145\001\002\000\004\007" +
    "\146\001\002\000\004\005\147\001\002\000\006\003\151" +
    "\004\152\001\002\000\006\006\uffba\012\uffba\001\002\000" +
    "\006\006\uffb0\012\uffb0\001\002\000\022\057\161\060\163" +
    "\061\170\062\162\063\164\075\166\076\167\077\165\001" +
    "\002\000\006\006\155\012\154\001\002\000\006\003\151" +
    "\004\152\001\002\000\004\010\156\001\002\000\004\006" +
    "\157\001\002\000\004\021\uffbb\001\002\000\006\006\uffb9" +
    "\012\uffb9\001\002\000\004\004\244\001\002\000\004\004" +
    "\237\001\002\000\004\004\232\001\002\000\004\004\225" +
    "\001\002\000\004\004\222\001\002\000\004\004\210\001" +
    "\002\000\004\004\205\001\002\000\004\004\171\001\002" +
    "\000\004\011\172\001\002\000\004\004\173\001\002\000" +
    "\020\003\175\066\177\067\200\070\176\071\174\072\202" +
    "\073\201\001\002\000\004\004\uff99\001\002\000\004\004" +
    "\uff96\001\002\000\004\004\uff9a\001\002\000\004\004\uff9c" +
    "\001\002\000\004\004\uff9b\001\002\000\004\004\uff97\001" +
    "\002\000\004\004\uff98\001\002\000\004\004\204\001\002" +
    "\000\006\006\uffb6\012\uffb6\001\002\000\004\011\206\001" +
    "\002\000\004\102\207\001\002\000\006\006\uffb2\012\uffb2" +
    "\001\002\000\004\011\211\001\002\000\004\004\212\001" +
    "\002\000\014\003\215\101\214\102\213\103\220\105\217" +
    "\001\002\000\004\004\uff94\001\002\000\004\004\uff95\001" +
    "\002\000\004\004\uff91\001\002\000\004\004\221\001\002" +
    "\000\004\004\uff93\001\002\000\004\004\uff92\001\002\000" +
    "\006\006\uffb3\012\uffb3\001\002\000\004\011\223\001\002" +
    "\000\004\102\224\001\002\000\006\006\uffb1\012\uffb1\001" +
    "\002\000\004\011\226\001\002\000\004\004\227\001\002" +
    "\000\014\003\215\101\214\102\213\103\220\105\217\001" +
    "\002\000\004\004\231\001\002\000\006\006\uffb4\012\uffb4" +
    "\001\002\000\004\011\233\001\002\000\004\004\234\001" +
    "\002\000\004\104\235\001\002\000\004\004\236\001\002" +
    "\000\006\006\uffb7\012\uffb7\001\002\000\004\011\240\001" +
    "\002\000\004\004\241\001\002\000\014\003\215\101\214" +
    "\102\213\103\220\105\217\001\002\000\004\004\243\001" +
    "\002\000\006\006\uffb5\012\uffb5\001\002\000\004\011\245" +
    "\001\002\000\004\004\246\001\002\000\004\104\247\001" +
    "\002\000\004\004\250\001\002\000\006\006\uffb8\012\uffb8" +
    "\001\002\000\004\026\252\001\002\000\004\023\253\001" +
    "\002\000\010\002\ufff3\003\ufff3\020\ufff3\001\002\000\004" +
    "\022\255\001\002\000\004\005\256\001\002\000\004\004" +
    "\263\001\002\000\004\021\260\001\002\000\004\026\261" +
    "\001\002\000\004\023\262\001\002\000\010\002\ufffa\003" +
    "\ufffa\020\ufffa\001\002\000\004\031\264\001\002\000\004" +
    "\004\265\001\002\000\004\011\266\001\002\000\004\007" +
    "\267\001\002\000\004\005\270\001\002\000\006\003\271" +
    "\004\274\001\002\000\006\003\271\004\274\001\002\000" +
    "\006\006\334\012\333\001\002\000\006\006\uffee\012\uffee" +
    "\001\002\000\014\032\275\033\301\034\277\035\300\036" +
    "\276\001\002\000\004\004\326\001\002\000\004\004\321" +
    "\001\002\000\004\004\314\001\002\000\004\004\307\001" +
    "\002\000\004\004\302\001\002\000\004\011\303\001\002" +
    "\000\004\004\304\001\002\000\014\003\215\101\214\102" +
    "\213\103\220\105\217\001\002\000\004\004\306\001\002" +
    "\000\006\006\uffeb\012\uffeb\001\002\000\004\011\310\001" +
    "\002\000\004\004\311\001\002\000\004\101\312\001\002" +
    "\000\004\004\313\001\002\000\006\006\uffe9\012\uffe9\001" +
    "\002\000\004\011\315\001\002\000\004\004\316\001\002" +
    "\000\004\101\317\001\002\000\004\004\320\001\002\000" +
    "\006\006\uffea\012\uffea\001\002\000\004\011\322\001\002" +
    "\000\004\004\323\001\002\000\004\036\324\001\002\000" +
    "\004\004\325\001\002\000\006\006\uffe8\012\uffe8\001\002" +
    "\000\004\011\327\001\002\000\004\004\330\001\002\000" +
    "\004\101\331\001\002\000\004\004\332\001\002\000\006" +
    "\006\uffec\012\uffec\001\002\000\006\003\271\004\274\001" +
    "\002\000\004\010\335\001\002\000\004\006\336\001\002" +
    "\000\004\021\uffef\001\002\000\006\006\uffed\012\uffed\001" +
    "\002\000\006\006\uffe7\012\uffe7\001\002\000\004\022\342" +
    "\001\002\000\004\005\344\001\002\000\004\021\u0124\001" +
    "\002\000\004\004\345\001\002\000\004\056\346\001\002" +
    "\000\004\004\347\001\002\000\004\011\350\001\002\000" +
    "\004\007\351\001\002\000\004\005\352\001\002\000\006" +
    "\003\353\004\356\001\002\000\006\006\uffa3\012\uffa3\001" +
    "\002\000\006\006\uffae\012\uffae\001\002\000\006\006\u0120" +
    "\012\u011f\001\002\000\024\057\367\060\357\061\366\062" +
    "\364\063\362\075\361\076\360\077\363\100\365\001\002" +
    "\000\004\004\u011a\001\002\000\004\004\u0117\001\002\000" +
    "\004\004\u0112\001\002\000\004\004\u010d\001\002\000\004" +
    "\004\u010a\001\002\000\004\004\u0105\001\002\000\004\004" +
    "\u0102\001\002\000\004\004\375\001\002\000\004\004\370" +
    "\001\002\000\004\011\371\001\002\000\004\004\372\001" +
    "\002\000\004\104\373\001\002\000\004\004\374\001\002" +
    "\000\006\006\uffac\012\uffac\001\002\000\004\011\376\001" +
    "\002\000\004\004\377\001\002\000\020\003\175\066\177" +
    "\067\200\070\176\071\174\072\202\073\201\001\002\000" +
    "\004\004\u0101\001\002\000\006\006\uffaa\012\uffaa\001\002" +
    "\000\004\011\u0103\001\002\000\004\102\u0104\001\002\000" +
    "\006\006\uffa9\012\uffa9\001\002\000\004\011\u0106\001\002" +
    "\000\004\004\u0107\001\002\000\014\003\215\101\214\102" +
    "\213\103\220\105\217\001\002\000\004\004\u0109\001\002" +
    "\000\006\006\uffa8\012\uffa8\001\002\000\004\011\u010b\001" +
    "\002\000\004\102\u010c\001\002\000\006\006\uffa4\012\uffa4" +
    "\001\002\000\004\011\u010e\001\002\000\004\004\u010f\001" +
    "\002\000\014\003\215\101\214\102\213\103\220\105\217" +
    "\001\002\000\004\004\u0111\001\002\000\006\006\uffa7\012" +
    "\uffa7\001\002\000\004\011\u0113\001\002\000\004\004\u0114" +
    "\001\002\000\014\003\215\101\214\102\213\103\220\105" +
    "\217\001\002\000\004\004\u0116\001\002\000\006\006\uffa6" +
    "\012\uffa6\001\002\000\004\011\u0118\001\002\000\004\102" +
    "\u0119\001\002\000\006\006\uffa5\012\uffa5\001\002\000\004" +
    "\011\u011b\001\002\000\004\004\u011c\001\002\000\004\104" +
    "\u011d\001\002\000\004\004\u011e\001\002\000\006\006\uffab" +
    "\012\uffab\001\002\000\006\003\353\004\356\001\002\000" +
    "\004\010\u0121\001\002\000\004\006\u0122\001\002\000\004" +
    "\021\uffaf\001\002\000\006\006\uffad\012\uffad\001\002\000" +
    "\004\026\u0125\001\002\000\004\023\u0126\001\002\000\010" +
    "\002\ufff1\003\ufff1\020\ufff1\001\002\000\004\022\u0128\001" +
    "\002\000\004\005\u012a\001\002\000\004\021\u015c\001\002" +
    "\000\004\004\u012b\001\002\000\004\045\u012c\001\002\000" +
    "\004\004\u012d\001\002\000\004\011\u012e\001\002\000\004" +
    "\007\u012f\001\002\000\004\005\u0130\001\002\000\006\003" +
    "\u0131\004\u0134\001\002\000\006\006\uffc9\012\uffc9\001\002" +
    "\000\006\006\uffd1\012\uffd1\001\002\000\006\006\u0158\012" +
    "\u0157\001\002\000\016\034\u0138\036\u0137\046\u013a\050\u0136" +
    "\051\u0139\052\u0135\001\002\000\004\004\u0152\001\002\000" +
    "\004\004\u014f\001\002\000\004\004\u014a\001\002\000\004" +
    "\004\u0145\001\002\000\004\004\u0140\001\002\000\004\004" +
    "\u013b\001\002\000\004\011\u013c\001\002\000\004\004\u013d" +
    "\001\002\000\004\104\u013e\001\002\000\004\004\u013f\001" +
    "\002\000\006\006\uffcf\012\uffcf\001\002\000\004\011\u0141" +
    "\001\002\000\004\004\u0142\001\002\000\014\003\215\101" +
    "\214\102\213\103\220\105\217\001\002\000\004\004\u0144" +
    "\001\002\000\006\006\uffcb\012\uffcb\001\002\000\004\011" +
    "\u0146\001\002\000\004\004\u0147\001\002\000\004\101\u0148" +
    "\001\002\000\004\004\u0149\001\002\000\006\006\uffcd\012" +
    "\uffcd\001\002\000\004\011\u014b\001\002\000\004\004\u014c" +
    "\001\002\000\004\106\u014d\001\002\000\004\004\u014e\001" +
    "\002\000\006\006\uffca\012\uffca\001\002\000\004\011\u0150" +
    "\001\002\000\004\102\u0151\001\002\000\006\006\uffce\012" +
    "\uffce\001\002\000\004\011\u0153\001\002\000\004\004\u0154" +
    "\001\002\000\004\101\u0155\001\002\000\004\004\u0156\001" +
    "\002\000\006\006\uffcc\012\uffcc\001\002\000\006\003\u0131" +
    "\004\u0134\001\002\000\004\010\u0159\001\002\000\004\006" +
    "\u015a\001\002\000\004\021\uffd2\001\002\000\006\006\uffd0" +
    "\012\uffd0\001\002\000\004\026\u015d\001\002\000\004\023" +
    "\u015e\001\002\000\010\002\ufff6\003\ufff6\020\ufff6\001\002" +
    "\000\004\022\u0160\001\002\000\004\005\u0162\001\002\000" +
    "\004\021\u0188\001\002\000\004\004\u0163\001\002\000\004" +
    "\045\u0164\001\002\000\004\004\u0165\001\002\000\004\011" +
    "\u0166\001\002\000\004\007\u0167\001\002\000\004\005\u0168" +
    "\001\002\000\006\003\u0169\004\u016c\001\002\000\006\006" +
    "\uffbc\012\uffbc\001\002\000\006\006\u0184\012\u0183\001\002" +
    "\000\006\006\uffc2\012\uffc2\001\002\000\012\034\u016f\046" +
    "\u0170\050\u016e\052\u016d\001\002\000\004\004\u017e\001\002" +
    "\000\004\004\u017b\001\002\000\004\004\u0176\001\002\000" +
    "\004\004\u0171\001\002\000\004\011\u0172\001\002\000\004" +
    "\004\u0173\001\002\000\004\104\u0174\001\002\000\004\004" +
    "\u0175\001\002\000\006\006\uffc0\012\uffc0\001\002\000\004" +
    "\011\u0177\001\002\000\004\004\u0178\001\002\000\004\101" +
    "\u0179\001\002\000\004\004\u017a\001\002\000\006\006\uffbe" +
    "\012\uffbe\001\002\000\004\011\u017c\001\002\000\004\102" +
    "\u017d\001\002\000\006\006\uffbf\012\uffbf\001\002\000\004" +
    "\011\u017f\001\002\000\004\004\u0180\001\002\000\004\101" +
    "\u0181\001\002\000\004\004\u0182\001\002\000\006\006\uffbd" +
    "\012\uffbd\001\002\000\006\003\u0169\004\u016c\001\002\000" +
    "\004\010\u0185\001\002\000\004\006\u0186\001\002\000\004" +
    "\021\uffc3\001\002\000\006\006\uffc1\012\uffc1\001\002\000" +
    "\004\026\u0189\001\002\000\004\023\u018a\001\002\000\010" +
    "\002\ufff4\003\ufff4\020\ufff4\001\002\000\004\022\u018c\001" +
    "\002\000\004\005\u018d\001\002\000\004\004\u0192\001\002" +
    "\000\004\021\u018f\001\002\000\004\026\u0190\001\002\000" +
    "\004\023\u0191\001\002\000\010\002\ufff2\003\ufff2\020\ufff2" +
    "\001\002\000\004\056\u0193\001\002\000\004\004\u0194\001" +
    "\002\000\004\011\u0195\001\002\000\004\007\u0196\001\002" +
    "\000\004\005\u0197\001\002\000\006\003\u0198\004\u019b\001" +
    "\002\000\006\006\uff9d\012\uff9d\001\002\000\006\006\uffa1" +
    "\012\uffa1\001\002\000\006\006\u01a9\012\u01a8\001\002\000" +
    "\006\057\u019c\060\u019d\001\002\000\004\004\u01a3\001\002" +
    "\000\004\004\u019e\001\002\000\004\011\u019f\001\002\000" +
    "\004\004\u01a0\001\002\000\004\104\u01a1\001\002\000\004" +
    "\004\u01a2\001\002\000\006\006\uff9e\012\uff9e\001\002\000" +
    "\004\011\u01a4\001\002\000\004\004\u01a5\001\002\000\004" +
    "\104\u01a6\001\002\000\004\004\u01a7\001\002\000\006\006" +
    "\uff9f\012\uff9f\001\002\000\006\003\u0198\004\u019b\001\002" +
    "\000\004\010\u01aa\001\002\000\004\006\u01ab\001\002\000" +
    "\004\021\uffa2\001\002\000\006\006\uffa0\012\uffa0\001\002" +
    "\000\004\022\u01ae\001\002\000\004\005\u01af\001\002\000" +
    "\004\004\u01b4\001\002\000\004\021\u01b1\001\002\000\004" +
    "\026\u01b2\001\002\000\004\023\u01b3\001\002\000\010\002" +
    "\ufff9\003\ufff9\020\ufff9\001\002\000\004\031\u01b5\001\002" +
    "\000\004\004\u01b6\001\002\000\004\011\u01b7\001\002\000" +
    "\004\007\u01b8\001\002\000\004\005\u01b9\001\002\000\006" +
    "\003\u01bb\004\u01bd\001\002\000\006\006\uffe5\012\uffe5\001" +
    "\002\000\006\003\u01bb\004\u01bd\001\002\000\006\006\u01dd" +
    "\012\u01dc\001\002\000\014\030\u01c1\035\u01c2\040\u01be\041" +
    "\u01c0\042\u01bf\001\002\000\004\004\u01d7\001\002\000\004" +
    "\004\u01d2\001\002\000\004\004\u01cd\001\002\000\004\004" +
    "\u01c8\001\002\000\004\004\u01c3\001\002\000\004\011\u01c4" +
    "\001\002\000\004\004\u01c5\001\002\000\004\101\u01c6\001" +
    "\002\000\004\004\u01c7\001\002\000\006\006\uffe0\012\uffe0" +
    "\001\002\000\004\011\u01c9\001\002\000\004\004\u01ca\001" +
    "\002\000\004\101\u01cb\001\002\000\004\004\u01cc\001\002" +
    "\000\006\006\uffe2\012\uffe2\001\002\000\004\011\u01ce\001" +
    "\002\000\004\004\u01cf\001\002\000\014\003\215\101\214" +
    "\102\213\103\220\105\217\001\002\000\004\004\u01d1\001" +
    "\002\000\006\006\uffe1\012\uffe1\001\002\000\004\011\u01d3" +
    "\001\002\000\004\004\u01d4\001\002\000\004\036\u01d5\001" +
    "\002\000\004\004\u01d6\001\002\000\006\006\uffdf\012\uffdf" +
    "\001\002\000\004\011\u01d8\001\002\000\004\004\u01d9\001" +
    "\002\000\004\101\u01da\001\002\000\004\004\u01db\001\002" +
    "\000\006\006\uffe3\012\uffe3\001\002\000\006\003\u01bb\004" +
    "\u01bd\001\002\000\004\010\u01de\001\002\000\004\006\u01df" +
    "\001\002\000\004\021\uffe6\001\002\000\006\006\uffe4\012" +
    "\uffe4\001\002\000\006\006\uffde\012\uffde\001\002\000\004" +
    "\022\u01e3\001\002\000\004\005\u01e5\001\002\000\004\021" +
    "\u01fc\001\002\000\004\004\u01e6\001\002\000\004\031\u01e7" +
    "\001\002\000\004\004\u01e8\001\002\000\004\011\u01e9\001" +
    "\002\000\004\007\u01ea\001\002\000\004\005\u01eb\001\002" +
    "\000\006\003\u01ec\004\u01ed\001\002\000\006\003\u01ec\004" +
    "\u01ed\001\002\000\004\032\u01f5\001\002\000\006\006\uffdc" +
    "\012\uffdc\001\002\000\006\006\u01f1\012\u01f0\001\002\000" +
    "\006\003\u01ec\004\u01ed\001\002\000\004\010\u01f2\001\002" +
    "\000\004\006\u01f3\001\002\000\004\021\uffdd\001\002\000" +
    "\006\006\uffdb\012\uffdb\001\002\000\004\004\u01f6\001\002" +
    "\000\004\011\u01f7\001\002\000\004\004\u01f8\001\002\000" +
    "\004\101\u01f9\001\002\000\004\004\u01fa\001\002\000\006" +
    "\006\uffda\012\uffda\001\002\000\006\006\uffd9\012\uffd9\001" +
    "\002\000\004\026\u01fd\001\002\000\004\023\u01fe\001\002" +
    "\000\010\002\ufff8\003\ufff8\020\ufff8\001\002\000\006\003" +
    "\u0200\020\u0202\001\002\000\006\003\u0200\020\u0202\001\002" +
    "\000\006\003\u0200\020\u0202\001\002\000\006\025\020\027" +
    "\021\001\002\000\004\002\uffff\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0204\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\015\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\050\027\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\106\021\104\001\001" +
    "\000\002\001\001\000\004\021\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\152\035\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\271\010\272\001\001\000\004\010\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\354\044\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u0132\024\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\u0142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u015a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\u0169\032\u016a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\u0186\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\u018d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\u0199\041\u0198\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u01ab\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u01af\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u01bb\013\u01b9\001\001\000" +
    "\002\001\001\000\004\013\u01e0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u01cf\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u01df" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u01e3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u01ee\016" +
    "\u01ed\001\001\000\004\016\u01fa\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u01f3\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\u0200\005\u0202\001\001" +
    "\000\006\004\u0200\005\u0204\001\001\000\006\004\u0200\005" +
    "\u0203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       Reporte.agregarError(new Errorx("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

        Reporte.agregarError(new Errorx("Sintactico irrecuperable",String.valueOf(s.value),"no reconocido", s.left, s.right));


    } 

    /// metodos

       private MetodoUsuario metodoUsuario = new MetodoUsuario();
    private MetodoTrivia metodoTrivia = new MetodoTrivia();
        //// DATOS RECOPILADOS: 

      private  Multimap<String, String> loginUsuario = ArrayListMultimap.create();



      private  Multimap<String, String> nuevoUsuario = ArrayListMultimap.create();
      private  Multimap<String, String> modUsuario  = ArrayListMultimap.create();
        private  Multimap<String, String> eliminarUsuario = ArrayListMultimap.create();

      public Multimap<String, String> getLoginUsuario() {
        return loginUsuario;
      }

        public Multimap<String, String> getModUsuario() {
          return modUsuario;
        }

        public Multimap<String, String> getNuevoUsuario() {
                return nuevoUsuario;
        }
      public Multimap<String, String> getEliminarUsuario() {
          return eliminarUsuario;
  }

  /// DATOS RECOPILADOS DE TRIVIA: 

        private  Multimap<String, String> nuevaTrivia = ArrayListMultimap.create();
        private  Multimap<String, String> eliminarTrivia = ArrayListMultimap.create();
        private  Multimap<String, String> modificarTrivia = ArrayListMultimap.create();

        public Multimap<String, String> getNuevaTrivia() {
          return nuevaTrivia;
        }

        public Multimap<String, String> getEliminarTrivia() {
          return eliminarTrivia;
        }

        public Multimap<String, String> getModificarTrivia() {
          return modificarTrivia;
        }

        //// DATOS RECOPILADOS DE COMPONENTE:
        private  Multimap<String, String> agregarComponente = ArrayListMultimap.create();
        private  Multimap<String, String> eliminarComponente = ArrayListMultimap.create();
        private  Multimap<String, String> modificarComponente = ArrayListMultimap.create();

        public Multimap<String, String> getAgregarComponente() {
          return agregarComponente;
        }

        public Multimap<String, String> getEliminarComponente() {
          return eliminarComponente;
        }

        public Multimap<String, String> getModificarComponente() {
          return modificarComponente;
        }






/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parserXson parser;

  /** Constructor */
  CUP$parser$actions(parserXson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= INICIO_ETIQUETA XSON VERSION VERSION1 INTERROGACION FIN_ETIQUETA tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipo ::= INICIO_SOLICITUD REALIZAR_SOLICITUDES FIN_ETIQUETA masSolicitudes 
            {
              Object RESULT =null;
		 System.out.println("fin de las solicitudes"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipo ::= soli 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // masSolicitudes ::= soli masSolicitudes 
            {
              Object RESULT =null;
		 System.out.println("otra solicitud"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("masSolicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // masSolicitudes ::= error masSolicitudes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masSolicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS USUARIO_NUEVO COMILLAS FIN_ETIQUETA nuevo_usuario INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para un nuevo usuario");  

         metodoUsuario.parametros(nuevoUsuario);
                metodoUsuario.analizarParametros();
                metodoUsuario.analizarDatosNew();
 
      
        nuevoUsuario = ArrayListMultimap.create();
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS MODIFICAR_USUARIO COMILLAS FIN_ETIQUETA modificar_usuario INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para modificar un  usuario");  
    
                metodoUsuario.parametros(modUsuario);
                metodoUsuario.analizarParametros();
                metodoUsuario.analizarDatosMod();
    
                modUsuario = ArrayListMultimap.create();
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS ELIMINAR_USUARIO COMILLAS FIN_ETIQUETA eliminar_usuario INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int euright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para eliminar un usuario");         
     
                metodoUsuario.parametros(eliminarUsuario);
                metodoUsuario.analizarParametros();
                metodoUsuario.analizarDatosDelete();

          eliminarUsuario = ArrayListMultimap.create();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS LOGIN_USUARIO COMILLAS FIN_ETIQUETA login INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para un login usuario");    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS NUEVA_TRIVIA COMILLAS FIN_ETIQUETA nueva_trivia INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  System.out.println(" para crear una trivia"); 

                metodoTrivia.parametros(nuevaTrivia);
                metodoTrivia.crearTrivia();
       
             nuevaTrivia = ArrayListMultimap.create();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS ELIMINAR_TRIVIA COMILLAS FIN_ETIQUETA eliminar_trivia INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para eliminar una trivia");        

        metodoTrivia.parametros(eliminarTrivia);
        metodoTrivia.eliminarTrivia();

        eliminarTrivia = ArrayListMultimap.create();
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS MODIFICAR_TRIVIA COMILLAS FIN_ETIQUETA modificar_trivia INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para modificar una trivia");  

          metodoTrivia.parametros(modificarTrivia);
          metodoTrivia.modificarTrivia(); 
          modificarTrivia = ArrayListMultimap.create();
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS AGREGAR_COMPONENTE COMILLAS FIN_ETIQUETA agregar_componente INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para agregar un componente a una trivia");   
     
      //    agregarComponente = ArrayListMultimap.create();
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS ELIMINAR_COMPONENTE COMILLAS FIN_ETIQUETA eliminar_componente INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para eliminar un componente a una trivia");
      //    eliminarComponente = ArrayListMultimap.create();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS MODIFICAR_COMPONENTE COMILLAS FIN_ETIQUETA modificar_componente INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  System.out.println(" para modificar un componente a una trivia");     
   
    //    modificarComponente = ArrayListMultimap.create(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // soli ::= INICIO_SOLICITUD FIN_SOLICITUDES_REALIZADA FIN_ETIQUETA 
            {
              Object RESULT =null;
		 System.out.println(" fin de varias solicitudes");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nuevo_usuario ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ newusuario LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_usuario",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // newusuario ::= par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newusuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // newusuario ::= newusuario COMA par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newusuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // par_clave_usu ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevoUsuario.put("USUARIO",(String)  vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // par_clave_usu ::= COMILLAS PASSWORD COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  nuevoUsuario.put("PASSWORD",(String) vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // par_clave_usu ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  nuevoUsuario.put("NOMBRE", (String) vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // par_clave_usu ::= COMILLAS INSTITUCION COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevoUsuario.put("INSTITUCION", (String) vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // par_clave_usu ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS FECHA_CREACION COMILLAS 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevoUsuario.put("FECHA_CREACION", (String) fc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // par_clave_usu ::= error par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modificar_usuario ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ modusuario LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificar_usuario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modusuario ::= par_clave_modusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modusuario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modusuario ::= modusuario COMA par_clave_modusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modusuario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // par_clave_modusu ::= COMILLAS USUARIO_ANTIGUO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  modUsuario.put("USUARIO_ANTIGUO", (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // par_clave_modusu ::= COMILLAS USUARIO_NUEVO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  modUsuario.put("USUARIO_NUEVO", (String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // par_clave_modusu ::= COMILLAS NUEVO_PASSWORD COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  modUsuario.put("NUEVO_PASSWORD", (String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // par_clave_modusu ::= COMILLAS INSTITUCION COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  modUsuario.put("INSTITUCION", (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // par_clave_modusu ::= COMILLAS FECHA_MODIFICACION COMILLAS DOS_PUNTOS COMILLAS FECHA_CREACION COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  modUsuario.put("FECHA_MODIFICACION", (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // par_clave_modusu ::= error par_clave_modusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // eliminar_usuario ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ elimusuario LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_usuario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elimusuario ::= par_clave_eliusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elimusuario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elimusuario ::= elimusuario COMA par_clave_eliusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elimusuario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // par_clave_eliusu ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  eliminarUsuario.put("USUARIO", (String) vc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_eliusu",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // par_clave_eliusu ::= error par_clave_eliusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_eliusu",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // login ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ loggin LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("login",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loggin ::= par_clave_login 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loggin",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // loggin ::= loggin COMA par_clave_login 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loggin",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // par_clave_login ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   loginUsuario.put("USUARIO",(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_login",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // par_clave_login ::= COMILLAS PASSWORD COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  loginUsuario.put("PASSWORD",(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_login",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // par_clave_login ::= error par_clave_login 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_login",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nueva_trivia ::= LLAVE_IZQ COMILLAS PARAMETROS_TRIVIA COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ new_trivia LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nueva_trivia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // new_trivia ::= par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_trivia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // new_trivia ::= new_trivia COMA par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_trivia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // par_clave_trivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevaTrivia.put("ID_TRIVIA",(String) ids ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // par_clave_trivia ::= COMILLAS TIEMPO_PREGUNTA COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nuevaTrivia.put("TIEMPO_PREGUNTA",(String) vn); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // par_clave_trivia ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevaTrivia.put("NOMBRE",(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // par_clave_trivia ::= COMILLAS TEMA COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevaTrivia.put("TEMA",(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // par_clave_trivia ::= COMILLAS USUARIO_CREACION COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevaTrivia.put("USUARIO_CREACION",(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // par_clave_trivia ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 nuevaTrivia.put("FECHA_CREACION",(String) fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // par_clave_trivia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // eliminar_trivia ::= LLAVE_IZQ COMILLAS PARAMETROS_TRIVIA COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ eli_trivia LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_trivia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // eli_trivia ::= par_clave_elimtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eli_trivia",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // eli_trivia ::= eli_trivia COMA par_clave_elimtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eli_trivia",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // par_clave_elimtrivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 eliminarTrivia.put("ID_TRIVIA", (String)ids );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elimtrivia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // par_clave_elimtrivia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elimtrivia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // modificar_trivia ::= LLAVE_IZQ COMILLAS PARAMETROS_TRIVIA COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ mod_trivia LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificar_trivia",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mod_trivia ::= par_clave_modtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod_trivia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mod_trivia ::= mod_trivia COMA par_clave_modtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod_trivia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_clave_modtrivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarTrivia.put( "ID_TRIVIA" ,(String) ids ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_clave_modtrivia ::= COMILLAS TIEMPO_PREGUNTA COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		modificarTrivia.put( "TIEMPO_PREGUNTA",(String) vn );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // par_clave_modtrivia ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarTrivia.put( "NOMBRE",(String) vc ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // par_clave_modtrivia ::= COMILLAS TEMA COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarTrivia.put( "TEMA",(String) vc ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // par_clave_modtrivia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // agregar_componente ::= LLAVE_IZQ COMILLAS PARAMETROS_COMPONENTE COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ agregar_comp LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar_componente",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // agregar_comp ::= par_clave_agrecom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar_comp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // agregar_comp ::= agregar_comp COMA par_clave_agrecom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar_comp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // par_clave_agrecom ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarComponente.put( "ID" ,(String) ids);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // par_clave_agrecom ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarComponente.put( "TRIVIA" ,(String) ids);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // par_clave_agrecom ::= COMILLAS CLASE COMILLAS DOS_PUNTOS COMILLAS clase COMILLAS 
            {
              Object RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object clas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarComponente.put( "CLASE" ,(String) clas);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // par_clave_agrecom ::= COMILLAS TEXTO_VISIBLE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarComponente.put("TEXTO_VISIBLE",(String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // par_clave_agrecom ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarComponente.put( "RESPUESTA" ,(String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // par_clave_agrecom ::= COMILLAS OPCIONES COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 agregarComponente.put( "OPCIONES" ,(String) a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // par_clave_agrecom ::= COMILLAS FILAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarComponente.put( "FILAS" ,(String) vn);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // par_clave_agrecom ::= COMILLAS COLUMNAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 agregarComponente.put( "COLUMNAS" ,(String) vn);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // par_clave_agrecom ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // modificar_componente ::= LLAVE_IZQ COMILLAS PARAMETROS_COMPONENTE COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ mod_comp LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificar_componente",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // mod_comp ::= par_clave_modcom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod_comp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // mod_comp ::= mod_comp COMA par_clave_modcom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod_comp",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // par_clave_modcom ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarComponente.put( "ID" ,(String) ids);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // par_clave_modcom ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarComponente.put( "TRIVIA" ,(String) ids);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // par_clave_modcom ::= COMILLAS CLASE COMILLAS DOS_PUNTOS COMILLAS clase COMILLAS 
            {
              Object RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object clas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarComponente.put( "CLASE" ,(String) clas);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // par_clave_modcom ::= COMILLAS INDICE COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 modificarComponente.put( "INDICE" ,(String) vn);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // par_clave_modcom ::= COMILLAS TEXTO_VISIBLE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarComponente.put("TEXTO_VISIBLE",(String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // par_clave_modcom ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarComponente.put( "RESPUESTA" ,(String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // par_clave_modcom ::= COMILLAS OPCIONES COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 modificarComponente.put( "OPCIONES" ,(String) a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // par_clave_modcom ::= COMILLAS FILAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 modificarComponente.put( "FILAS" ,(String) vn);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // par_clave_modcom ::= COMILLAS COLUMNAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 modificarComponente.put( "COLUMNAS" ,(String) vn);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // par_clave_modcom ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modcom",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // eliminar_componente ::= LLAVE_IZQ COMILLAS PARAMETROS_COMPONENTE COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ eliminar_comp LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_componente",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // eliminar_comp ::= par_clave_elicom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_comp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // eliminar_comp ::= eliminar_comp COMA par_clave_elicom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_comp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // par_clave_elicom ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elicom",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // par_clave_elicom ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elicom",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // par_clave_elicom ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elicom",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // clase ::= CAMPO_TEXTO 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ct; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // clase ::= AREA_TEXTO 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=at; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // clase ::= CHECKBOX 
            {
              Object RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // clase ::= RADIO 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ra; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // clase ::= FICHERO 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=fi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // clase ::= COMBO 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object co = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=co; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // clase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opt ::= VALOR_CADENA 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt ::= VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=vn ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt ::= PREGUNTA 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=pr ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opt ::= OPTIONS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=op ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opt ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
