package com.app.gramaticas.xson;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------



import java_cup.runtime.*;
import com.google.common.collect.Multimap;
import com.google.common.collect.ArrayListMultimap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserXson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public parserXson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserXson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserXson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\002\011\000\002\003" +
    "\006\000\002\003\003\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\004\015\000\002\004\015\000" +
    "\002\004\015\000\002\004\015\000\002\004\015\000\002" +
    "\004\015\000\002\004\015\000\002\004\015\000\002\004" +
    "\015\000\002\004\015\000\002\004\005\000\002\006\015" +
    "\000\002\007\003\000\002\007\005\000\002\010\011\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\004\000\002\011\015\000\002\012" +
    "\003\000\002\012\005\000\002\013\011\000\002\013\011" +
    "\000\002\013\011\000\002\013\011\000\002\013\011\000" +
    "\002\013\004\000\002\014\015\000\002\015\003\000\002" +
    "\015\005\000\002\016\011\000\002\016\004\000\002\017" +
    "\015\000\002\020\003\000\002\020\005\000\002\021\011" +
    "\000\002\021\011\000\002\021\004\000\002\022\015\000" +
    "\002\023\003\000\002\023\005\000\002\024\011\000\002" +
    "\024\007\000\002\024\011\000\002\024\011\000\002\024" +
    "\004\000\002\025\015\000\002\026\003\000\002\026\005" +
    "\000\002\027\011\000\002\027\004\000\002\030\015\000" +
    "\002\031\003\000\002\031\005\000\002\032\011\000\002" +
    "\032\007\000\002\032\011\000\002\032\011\000\002\032" +
    "\004\000\002\033\015\000\002\034\003\000\002\034\005" +
    "\000\002\035\011\000\002\035\011\000\002\035\011\000" +
    "\002\035\011\000\002\035\011\000\002\035\011\000\002" +
    "\035\007\000\002\035\007\000\002\035\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\037\015\000\002\040\003\000\002\040\005\000\002\041" +
    "\011\000\002\041\011\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\004\021\005\001\002\000\004\002\u01bd\001" +
    "\002\000\004\014\006\001\002\000\004\015\007\001\002" +
    "\000\004\017\010\001\002\000\004\013\011\001\002\000" +
    "\004\022\012\001\002\000\006\003\014\020\015\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\ufffd\001\002\000" +
    "\010\024\017\025\020\027\021\001\002\000\004\002\000" +
    "\001\002\000\004\022\u01b6\001\002\000\004\011\023\001" +
    "\002\000\004\022\022\001\002\000\010\002\ufff0\003\ufff0" +
    "\020\ufff0\001\002\000\004\004\024\001\002\000\026\030" +
    "\033\037\026\043\025\044\035\047\031\053\036\054\030" +
    "\055\034\064\027\065\032\001\002\000\004\004\u0199\001" +
    "\002\000\004\004\u0164\001\002\000\004\004\u0141\001\002" +
    "\000\004\004\u0114\001\002\000\004\004\347\001\002\000" +
    "\004\004\341\001\002\000\004\004\251\001\002\000\004" +
    "\004\137\001\002\000\004\004\074\001\002\000\004\004" +
    "\037\001\002\000\004\022\040\001\002\000\004\005\042" +
    "\001\002\000\004\021\071\001\002\000\004\004\043\001" +
    "\002\000\004\045\044\001\002\000\004\004\045\001\002" +
    "\000\004\011\046\001\002\000\004\007\047\001\002\000" +
    "\004\005\050\001\002\000\006\003\053\004\054\001\002" +
    "\000\006\006\065\012\064\001\002\000\006\006\uffc9\012" +
    "\uffc9\001\002\000\006\003\053\004\054\001\002\000\004" +
    "\046\055\001\002\000\004\004\056\001\002\000\004\011" +
    "\057\001\002\000\004\004\060\001\002\000\004\104\061" +
    "\001\002\000\004\004\062\001\002\000\006\006\uffc7\012" +
    "\uffc7\001\002\000\006\006\uffc6\012\uffc6\001\002\000\006" +
    "\003\053\004\054\001\002\000\004\010\066\001\002\000" +
    "\004\006\067\001\002\000\004\021\uffca\001\002\000\006" +
    "\006\uffc8\012\uffc8\001\002\000\004\026\072\001\002\000" +
    "\004\023\073\001\002\000\010\002\ufff5\003\ufff5\020\ufff5" +
    "\001\002\000\004\022\075\001\002\000\004\005\077\001" +
    "\002\000\004\021\134\001\002\000\004\004\100\001\002" +
    "\000\004\031\101\001\002\000\004\004\102\001\002\000" +
    "\004\011\103\001\002\000\004\007\104\001\002\000\004" +
    "\005\105\001\002\000\006\003\107\004\111\001\002\000" +
    "\006\006\uffd7\012\uffd7\001\002\000\006\003\107\004\111" +
    "\001\002\000\006\006\127\012\126\001\002\000\006\032" +
    "\112\033\113\001\002\000\004\004\121\001\002\000\004" +
    "\004\114\001\002\000\004\011\115\001\002\000\004\004" +
    "\116\001\002\000\004\101\117\001\002\000\004\004\120" +
    "\001\002\000\006\006\uffd4\012\uffd4\001\002\000\004\011" +
    "\122\001\002\000\004\004\123\001\002\000\004\101\124" +
    "\001\002\000\004\004\125\001\002\000\006\006\uffd5\012" +
    "\uffd5\001\002\000\006\003\107\004\111\001\002\000\004" +
    "\010\130\001\002\000\004\006\131\001\002\000\004\021" +
    "\uffd8\001\002\000\006\006\uffd6\012\uffd6\001\002\000\006" +
    "\006\uffd3\012\uffd3\001\002\000\004\026\135\001\002\000" +
    "\004\023\136\001\002\000\010\002\ufff7\003\ufff7\020\ufff7" +
    "\001\002\000\004\022\140\001\002\000\004\005\142\001" +
    "\002\000\004\021\246\001\002\000\004\004\143\001\002" +
    "\000\004\056\144\001\002\000\004\004\145\001\002\000" +
    "\004\011\146\001\002\000\004\007\147\001\002\000\004" +
    "\005\150\001\002\000\006\003\152\004\153\001\002\000" +
    "\006\006\uffbc\012\uffbc\001\002\000\006\003\152\004\153" +
    "\001\002\000\022\057\162\060\164\061\171\062\163\063" +
    "\165\075\167\076\170\077\166\001\002\000\006\006\156" +
    "\012\155\001\002\000\006\003\152\004\153\001\002\000" +
    "\004\010\157\001\002\000\004\006\160\001\002\000\004" +
    "\021\uffbd\001\002\000\006\006\uffbb\012\uffbb\001\002\000" +
    "\004\004\240\001\002\000\004\004\233\001\002\000\004" +
    "\004\226\001\002\000\004\004\221\001\002\000\004\004" +
    "\216\001\002\000\004\004\211\001\002\000\004\004\206" +
    "\001\002\000\004\004\172\001\002\000\004\011\173\001" +
    "\002\000\004\004\174\001\002\000\020\003\176\066\177" +
    "\067\201\070\200\071\175\072\203\073\202\001\002\000" +
    "\004\004\uffae\001\002\000\004\004\uffab\001\002\000\004" +
    "\004\uffb1\001\002\000\004\004\uffaf\001\002\000\004\004" +
    "\uffb0\001\002\000\004\004\uffac\001\002\000\004\004\uffad" +
    "\001\002\000\004\004\205\001\002\000\006\006\uffb8\012" +
    "\uffb8\001\002\000\004\011\207\001\002\000\004\102\210" +
    "\001\002\000\006\006\uffb4\012\uffb4\001\002\000\004\011" +
    "\212\001\002\000\004\004\213\001\002\000\004\103\214" +
    "\001\002\000\004\004\215\001\002\000\006\006\uffb5\012" +
    "\uffb5\001\002\000\004\011\217\001\002\000\004\102\220" +
    "\001\002\000\006\006\uffb3\012\uffb3\001\002\000\004\011" +
    "\222\001\002\000\004\004\223\001\002\000\004\101\224" +
    "\001\002\000\004\004\225\001\002\000\006\006\uffb6\012" +
    "\uffb6\001\002\000\004\011\227\001\002\000\004\004\230" +
    "\001\002\000\004\104\231\001\002\000\004\004\232\001" +
    "\002\000\006\006\uffb9\012\uffb9\001\002\000\004\011\234" +
    "\001\002\000\004\004\235\001\002\000\004\101\236\001" +
    "\002\000\004\004\237\001\002\000\006\006\uffb7\012\uffb7" +
    "\001\002\000\004\011\241\001\002\000\004\004\242\001" +
    "\002\000\004\104\243\001\002\000\004\004\244\001\002" +
    "\000\006\006\uffba\012\uffba\001\002\000\006\006\uffb2\012" +
    "\uffb2\001\002\000\004\026\247\001\002\000\004\023\250" +
    "\001\002\000\010\002\ufff3\003\ufff3\020\ufff3\001\002\000" +
    "\004\022\252\001\002\000\004\005\253\001\002\000\004" +
    "\004\260\001\002\000\004\021\255\001\002\000\004\026" +
    "\256\001\002\000\004\023\257\001\002\000\010\002\ufffa" +
    "\003\ufffa\020\ufffa\001\002\000\004\031\261\001\002\000" +
    "\004\004\262\001\002\000\004\011\263\001\002\000\004" +
    "\007\264\001\002\000\004\005\265\001\002\000\006\003" +
    "\266\004\271\001\002\000\006\003\266\004\271\001\002" +
    "\000\006\006\334\012\333\001\002\000\006\006\uffee\012" +
    "\uffee\001\002\000\014\032\272\033\276\034\274\035\275" +
    "\036\273\001\002\000\004\004\326\001\002\000\004\004" +
    "\321\001\002\000\004\004\314\001\002\000\004\004\307" +
    "\001\002\000\004\004\277\001\002\000\004\011\300\001" +
    "\002\000\004\004\301\001\002\000\010\003\303\101\304" +
    "\102\302\001\002\000\004\004\uffa9\001\002\000\004\004" +
    "\uffa8\001\002\000\004\004\uffaa\001\002\000\004\004\306" +
    "\001\002\000\006\006\uffeb\012\uffeb\001\002\000\004\011" +
    "\310\001\002\000\004\004\311\001\002\000\004\101\312" +
    "\001\002\000\004\004\313\001\002\000\006\006\uffe9\012" +
    "\uffe9\001\002\000\004\011\315\001\002\000\004\004\316" +
    "\001\002\000\004\101\317\001\002\000\004\004\320\001" +
    "\002\000\006\006\uffea\012\uffea\001\002\000\004\011\322" +
    "\001\002\000\004\004\323\001\002\000\004\036\324\001" +
    "\002\000\004\004\325\001\002\000\006\006\uffe8\012\uffe8" +
    "\001\002\000\004\011\327\001\002\000\004\004\330\001" +
    "\002\000\004\101\331\001\002\000\004\004\332\001\002" +
    "\000\006\006\uffec\012\uffec\001\002\000\006\003\266\004" +
    "\271\001\002\000\004\010\335\001\002\000\004\006\336" +
    "\001\002\000\004\021\uffef\001\002\000\006\006\uffed\012" +
    "\uffed\001\002\000\006\006\uffe7\012\uffe7\001\002\000\004" +
    "\022\342\001\002\000\002\001\002\000\004\021\344\001" +
    "\002\000\004\026\345\001\002\000\004\023\346\001\002" +
    "\000\010\002\ufff1\003\ufff1\020\ufff1\001\002\000\004\022" +
    "\350\001\002\000\004\005\352\001\002\000\004\021\u0111" +
    "\001\002\000\004\004\353\001\002\000\004\045\354\001" +
    "\002\000\004\004\355\001\002\000\004\011\356\001\002" +
    "\000\004\007\357\001\002\000\004\005\360\001\002\000" +
    "\006\003\361\004\364\001\002\000\006\003\361\004\364" +
    "\001\002\000\006\006\uffd1\012\uffd1\001\002\000\006\006" +
    "\u010c\012\u010b\001\002\000\012\034\367\046\370\050\366" +
    "\052\365\001\002\000\004\004\u0106\001\002\000\004\004" +
    "\u0103\001\002\000\004\004\376\001\002\000\004\004\371" +
    "\001\002\000\004\011\372\001\002\000\004\004\373\001" +
    "\002\000\004\104\374\001\002\000\004\004\375\001\002" +
    "\000\006\006\uffcf\012\uffcf\001\002\000\004\011\377\001" +
    "\002\000\004\004\u0100\001\002\000\004\101\u0101\001\002" +
    "\000\004\004\u0102\001\002\000\006\006\uffcd\012\uffcd\001" +
    "\002\000\004\011\u0104\001\002\000\004\102\u0105\001\002" +
    "\000\006\006\uffce\012\uffce\001\002\000\004\011\u0107\001" +
    "\002\000\004\004\u0108\001\002\000\004\101\u0109\001\002" +
    "\000\004\004\u010a\001\002\000\006\006\uffcc\012\uffcc\001" +
    "\002\000\006\003\361\004\364\001\002\000\004\010\u010d" +
    "\001\002\000\004\006\u010e\001\002\000\004\021\uffd2\001" +
    "\002\000\006\006\uffd0\012\uffd0\001\002\000\006\006\uffcb" +
    "\012\uffcb\001\002\000\004\026\u0112\001\002\000\004\023" +
    "\u0113\001\002\000\010\002\ufff6\003\ufff6\020\ufff6\001\002" +
    "\000\004\022\u0115\001\002\000\004\005\u0117\001\002\000" +
    "\004\021\u013e\001\002\000\004\004\u0118\001\002\000\004" +
    "\045\u0119\001\002\000\004\004\u011a\001\002\000\004\011" +
    "\u011b\001\002\000\004\007\u011c\001\002\000\004\005\u011d" +
    "\001\002\000\006\003\u011e\004\u0121\001\002\000\006\003" +
    "\u011e\004\u0121\001\002\000\006\006\uffc4\012\uffc4\001\002" +
    "\000\006\006\u0139\012\u0138\001\002\000\012\034\u0124\046" +
    "\u0125\050\u0123\052\u0122\001\002\000\004\004\u0133\001\002" +
    "\000\004\004\u0130\001\002\000\004\004\u012b\001\002\000" +
    "\004\004\u0126\001\002\000\004\011\u0127\001\002\000\004" +
    "\004\u0128\001\002\000\004\104\u0129\001\002\000\004\004" +
    "\u012a\001\002\000\006\006\uffc2\012\uffc2\001\002\000\004" +
    "\011\u012c\001\002\000\004\004\u012d\001\002\000\004\101" +
    "\u012e\001\002\000\004\004\u012f\001\002\000\006\006\uffc0" +
    "\012\uffc0\001\002\000\004\011\u0131\001\002\000\004\102" +
    "\u0132\001\002\000\006\006\uffc1\012\uffc1\001\002\000\004" +
    "\011\u0134\001\002\000\004\004\u0135\001\002\000\004\101" +
    "\u0136\001\002\000\004\004\u0137\001\002\000\006\006\uffbf" +
    "\012\uffbf\001\002\000\006\003\u011e\004\u0121\001\002\000" +
    "\004\010\u013a\001\002\000\004\006\u013b\001\002\000\004" +
    "\021\uffc5\001\002\000\006\006\uffc3\012\uffc3\001\002\000" +
    "\006\006\uffbe\012\uffbe\001\002\000\004\026\u013f\001\002" +
    "\000\004\023\u0140\001\002\000\010\002\ufff4\003\ufff4\020" +
    "\ufff4\001\002\000\004\022\u0142\001\002\000\004\005\u0143" +
    "\001\002\000\004\004\u0148\001\002\000\004\021\u0145\001" +
    "\002\000\004\026\u0146\001\002\000\004\023\u0147\001\002" +
    "\000\010\002\ufff2\003\ufff2\020\ufff2\001\002\000\004\056" +
    "\u0149\001\002\000\004\004\u014a\001\002\000\004\011\u014b" +
    "\001\002\000\004\007\u014c\001\002\000\004\005\u014d\001" +
    "\002\000\006\003\u014e\004\u0151\001\002\000\006\003\u014e" +
    "\004\u0151\001\002\000\006\006\uffa6\012\uffa6\001\002\000" +
    "\006\006\u015f\012\u015e\001\002\000\006\057\u0152\060\u0153" +
    "\001\002\000\004\004\u0159\001\002\000\004\004\u0154\001" +
    "\002\000\004\011\u0155\001\002\000\004\004\u0156\001\002" +
    "\000\004\104\u0157\001\002\000\004\004\u0158\001\002\000" +
    "\006\006\uffa3\012\uffa3\001\002\000\004\011\u015a\001\002" +
    "\000\004\004\u015b\001\002\000\004\104\u015c\001\002\000" +
    "\004\004\u015d\001\002\000\006\006\uffa4\012\uffa4\001\002" +
    "\000\006\003\u014e\004\u0151\001\002\000\004\010\u0160\001" +
    "\002\000\004\006\u0161\001\002\000\004\021\uffa7\001\002" +
    "\000\006\006\uffa5\012\uffa5\001\002\000\006\006\uffa2\012" +
    "\uffa2\001\002\000\004\022\u0165\001\002\000\004\005\u0166" +
    "\001\002\000\004\004\u016b\001\002\000\004\021\u0168\001" +
    "\002\000\004\026\u0169\001\002\000\004\023\u016a\001\002" +
    "\000\010\002\ufff9\003\ufff9\020\ufff9\001\002\000\004\031" +
    "\u016c\001\002\000\004\004\u016d\001\002\000\004\011\u016e" +
    "\001\002\000\004\007\u016f\001\002\000\004\005\u0170\001" +
    "\002\000\006\003\u0172\004\u0174\001\002\000\006\006\uffe5" +
    "\012\uffe5\001\002\000\006\003\u0172\004\u0174\001\002\000" +
    "\006\006\u0194\012\u0193\001\002\000\014\030\u0178\035\u0179" +
    "\040\u0175\041\u0177\042\u0176\001\002\000\004\004\u018e\001" +
    "\002\000\004\004\u0189\001\002\000\004\004\u0184\001\002" +
    "\000\004\004\u017f\001\002\000\004\004\u017a\001\002\000" +
    "\004\011\u017b\001\002\000\004\004\u017c\001\002\000\004" +
    "\101\u017d\001\002\000\004\004\u017e\001\002\000\006\006" +
    "\uffe0\012\uffe0\001\002\000\004\011\u0180\001\002\000\004" +
    "\004\u0181\001\002\000\004\101\u0182\001\002\000\004\004" +
    "\u0183\001\002\000\006\006\uffe2\012\uffe2\001\002\000\004" +
    "\011\u0185\001\002\000\004\004\u0186\001\002\000\010\003" +
    "\303\101\304\102\302\001\002\000\004\004\u0188\001\002" +
    "\000\006\006\uffe1\012\uffe1\001\002\000\004\011\u018a\001" +
    "\002\000\004\004\u018b\001\002\000\004\036\u018c\001\002" +
    "\000\004\004\u018d\001\002\000\006\006\uffdf\012\uffdf\001" +
    "\002\000\004\011\u018f\001\002\000\004\004\u0190\001\002" +
    "\000\004\101\u0191\001\002\000\004\004\u0192\001\002\000" +
    "\006\006\uffe3\012\uffe3\001\002\000\006\003\u0172\004\u0174" +
    "\001\002\000\004\010\u0195\001\002\000\004\006\u0196\001" +
    "\002\000\004\021\uffe6\001\002\000\006\006\uffe4\012\uffe4" +
    "\001\002\000\006\006\uffde\012\uffde\001\002\000\004\022" +
    "\u019a\001\002\000\004\005\u019c\001\002\000\004\021\u01b3" +
    "\001\002\000\004\004\u019d\001\002\000\004\031\u019e\001" +
    "\002\000\004\004\u019f\001\002\000\004\011\u01a0\001\002" +
    "\000\004\007\u01a1\001\002\000\004\005\u01a2\001\002\000" +
    "\006\003\u01a3\004\u01a4\001\002\000\006\003\u01a3\004\u01a4" +
    "\001\002\000\004\032\u01ac\001\002\000\006\006\uffdc\012" +
    "\uffdc\001\002\000\006\006\u01a8\012\u01a7\001\002\000\006" +
    "\003\u01a3\004\u01a4\001\002\000\004\010\u01a9\001\002\000" +
    "\004\006\u01aa\001\002\000\004\021\uffdd\001\002\000\006" +
    "\006\uffdb\012\uffdb\001\002\000\004\004\u01ad\001\002\000" +
    "\004\011\u01ae\001\002\000\004\004\u01af\001\002\000\004" +
    "\101\u01b0\001\002\000\004\004\u01b1\001\002\000\006\006" +
    "\uffda\012\uffda\001\002\000\006\006\uffd9\012\uffd9\001\002" +
    "\000\004\026\u01b4\001\002\000\004\023\u01b5\001\002\000" +
    "\010\002\ufff8\003\ufff8\020\ufff8\001\002\000\006\003\u01b7" +
    "\020\u01b9\001\002\000\006\003\u01b7\020\u01b9\001\002\000" +
    "\006\003\u01b7\020\u01b9\001\002\000\006\025\020\027\021" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffb\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01bb\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\015\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\050\027\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\107\021\105\001\001\000\002\001\001\000\004\021" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\153\035\150\001\001" +
    "\000\002\001\001\000\004\035\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\266\010\267\001\001\000\004\010\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\350\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\362\024\361\001\001\000\004" +
    "\024\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\u011f\032\u011e\001\001\000\004\032\u013c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u013b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\u014f\041\u014e\001\001" +
    "\000\004\041\u0162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u0161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u0172\013\u0170\001\001\000\002\001\001\000\004" +
    "\013\u0197\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u0186\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0196\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u019a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\u01a5\016\u01a4\001\001\000\004" +
    "\016\u01b1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u01aa\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\u01b7\005\u01b9\001\001\000\006\004\u01b7\005" +
    "\u01bb\001\001\000\006\004\u01b7\005\u01ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    } 
        //// DATOS RECOPILADOS: 

      private  Multimap<String, String> loginUsuario = ArrayListMultimap.create();
      private  Multimap<String, String> modUsuario  = ArrayListMultimap.create();
      private  Multimap<String, String> nuevoUsuario = ArrayListMultimap.create();
      private  Multimap<String, String> crearTrivia = ArrayListMultimap.create();
        private  Multimap<String, String> eliminarUsuario = ArrayListMultimap.create();

      public Multimap<String, String> getLoginUsuario() {
        return loginUsuario;
      }

        public Multimap<String, String> getModUsuario() {
          return modUsuario;
        }

        public Multimap<String, String> getNuevoUsuario() {
                return nuevoUsuario;
        }
      public Multimap<String, String> getEliminarUsuario() {
          return eliminarUsuario;
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parserXson parser;

  /** Constructor */
  CUP$parser$actions(parserXson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= INICIO_ETIQUETA XSON VERSION VERSION1 INTERROGACION FIN_ETIQUETA tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipo ::= INICIO_SOLICITUD REALIZAR_SOLICITUDES FIN_ETIQUETA masSolicitudes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipo ::= soli 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // masSolicitudes ::= soli masSolicitudes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masSolicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // masSolicitudes ::= error masSolicitudes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("masSolicitudes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS USUARIO_NUEVO COMILLAS FIN_ETIQUETA nuevo_usuario INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int nuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para un nuevo usuario"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS MODIFICAR_USUARIO COMILLAS FIN_ETIQUETA modificar_usuario INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para modificar un  usuario");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS ELIMINAR_USUARIO COMILLAS FIN_ETIQUETA eliminar_usuario INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int euleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int euright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para eliminar un usuario");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS LOGIN_USUARIO COMILLAS FIN_ETIQUETA login INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para un login usuario");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS NUEVA_TRIVIA COMILLAS FIN_ETIQUETA nueva_trivia INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  System.out.println(" para crear una trivia");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS ELIMINAR_TRIVIA COMILLAS FIN_ETIQUETA eliminar_trivia INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para eliminar una trivia");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS MODIFICAR_TRIVIA COMILLAS FIN_ETIQUETA modificar_trivia INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para modificar una trivia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS AGREGAR_COMPONENTE COMILLAS FIN_ETIQUETA agregar_componente INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para agregar un componente a una trivia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS ELIMINAR_COMPONENTE COMILLAS FIN_ETIQUETA eliminar_componente INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(" para agregar un componente a una trivia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // soli ::= INICIO_SOLICITUD REALIZAR_SOLICITUD DOS_PUNTOS COMILLAS MODIFICAR_COMPONENTE COMILLAS FIN_ETIQUETA modificar_componente INICIO_ETIQUETA FIN_SOLICITUD_REALIZADA FIN_SOLICITUD 
            {
              Object RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  System.out.println(" para modificar un componente a una trivia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // soli ::= INICIO_SOLICITUD FIN_SOLICITUDES_REALIZADA FIN_ETIQUETA 
            {
              Object RESULT =null;
		 System.out.println(" fin de las solicitudes"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("soli",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nuevo_usuario ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ newusuario LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nuevo_usuario",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // newusuario ::= par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newusuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // newusuario ::= newusuario COMA par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("newusuario",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // par_clave_usu ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("usuario: "+(String) vc); nuevoUsuario.put("USUARIO",(String)  vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // par_clave_usu ::= COMILLAS PASSWORD COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("password: "+ vc); nuevoUsuario.put("PASSWORD",(String) vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // par_clave_usu ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("nombre: "+ vc); nuevoUsuario.put("NOMBRE", (String) vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // par_clave_usu ::= COMILLAS INSTITUCION COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("institucion: "+ vc);nuevoUsuario.put("INSTITUCION", (String) vc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // par_clave_usu ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS FECHA_CREACION COMILLAS 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("fecha creacion: "+ fc);nuevoUsuario.put("FECHA_CREACION", (String) fc) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // par_clave_usu ::= error par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modificar_usuario ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ modusuario LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificar_usuario",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modusuario ::= par_clave_modusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modusuario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modusuario ::= modusuario COMA par_clave_modusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modusuario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // par_clave_modusu ::= COMILLAS USUARIO_ANTIGUO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("usuario antiguo: "+ (String) vc); modUsuario.put("USUARIO_ANTIGUO", (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // par_clave_modusu ::= COMILLAS USUARIO_NUEVO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("usuario nuevo: "+ (String) vc); modUsuario.put("USUARIO_NUEVO", (String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // par_clave_modusu ::= COMILLAS NUEVO_PASSWORD COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("nuevo password: "+ (String) vc); modUsuario.put("NUEVO_PASSWORD", (String) vc);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // par_clave_modusu ::= COMILLAS INSTITUCION COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("institucion: "+ (String) vc); modUsuario.put("INSTITUCION", (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // par_clave_modusu ::= COMILLAS FECHA_MODIFICACION COMILLAS DOS_PUNTOS COMILLAS FECHA_CREACION COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("fecha modificacion: "+ (String) vc); modUsuario.put("FECHA_MODIFICACION", (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // par_clave_modusu ::= error par_clave_modusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modusu",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // eliminar_usuario ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ elimusuario LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_usuario",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elimusuario ::= par_clave_eliusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elimusuario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elimusuario ::= elimusuario COMA par_clave_eliusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elimusuario",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // par_clave_eliusu ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("usuario: "+ (String) vc); eliminarUsuario.put("USUARIO", (String) vc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_eliusu",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // par_clave_eliusu ::= error par_clave_eliusu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_eliusu",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // login ::= LLAVE_IZQ COMILLAS DATOS_USUARIO COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ loggin LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("login",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // loggin ::= par_clave_login 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loggin",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // loggin ::= loggin COMA par_clave_login 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loggin",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // par_clave_login ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object us = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("usuario: "+ (String) vc);   loginUsuario.put((String) us,(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_login",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // par_clave_login ::= COMILLAS PASSWORD COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int passleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int passright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("password: "+ (String) vc);  loginUsuario.put((String) pass,(String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_login",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // par_clave_login ::= error par_clave_login 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_login",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nueva_trivia ::= LLAVE_IZQ COMILLAS PARAMETROS_TRIVIA COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ new_trivia LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nueva_trivia",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // new_trivia ::= par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_trivia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // new_trivia ::= new_trivia COMA par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_trivia",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // par_clave_trivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("id: "+ (String) ids); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // par_clave_trivia ::= COMILLAS TIEMPO_PREGUNTA COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tiempo: "+ (String) vn); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // par_clave_trivia ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("nombre: "+ (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // par_clave_trivia ::= COMILLAS TEMA COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("tema: "+ (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // par_clave_trivia ::= error par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // eliminar_trivia ::= LLAVE_IZQ COMILLAS PARAMETROS_TRIVIA COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ eli_trivia LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_trivia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // eli_trivia ::= par_clave_elimtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eli_trivia",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // eli_trivia ::= eli_trivia COMA par_clave_elimtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eli_trivia",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // par_clave_elimtrivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elimtrivia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // par_clave_elimtrivia ::= error par_clave_elimtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elimtrivia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // modificar_trivia ::= LLAVE_IZQ COMILLAS PARAMETROS_TRIVIA COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ mod_trivia LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificar_trivia",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mod_trivia ::= par_clave_modtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod_trivia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mod_trivia ::= mod_trivia COMA par_clave_modtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod_trivia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par_clave_modtrivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("id: "+ (String) ids); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par_clave_modtrivia ::= COMILLAS TIEMPO_PREGUNTA COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("tiempo: "+ (String) vn); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_clave_modtrivia ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("nombre: "+ (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_clave_modtrivia ::= COMILLAS TEMA COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("tema: "+ (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // par_clave_modtrivia ::= error par_clave_modtrivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_modtrivia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // agregar_componente ::= LLAVE_IZQ COMILLAS PARAMETROS_COMPONENTE COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ agregar_comp LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar_componente",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // agregar_comp ::= par_clave_agrecom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar_comp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // agregar_comp ::= agregar_comp COMA par_clave_agrecom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("agregar_comp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // par_clave_agrecom ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("id: "+ (String) ids); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // par_clave_agrecom ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("trivia"+ (String) ids); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // par_clave_agrecom ::= COMILLAS CLASE COMILLAS DOS_PUNTOS COMILLAS clase COMILLAS 
            {
              Object RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object clas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" clase: "+ (String) clas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // par_clave_agrecom ::= COMILLAS TEXTO_VISIBLE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" texto_visible: "+ (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // par_clave_agrecom ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" Respuesta "+ (String) vc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // par_clave_agrecom ::= COMILLAS OPCIONES COMILLAS DOS_PUNTOS COMILLAS OPTIONS COMILLAS 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(" Opciones: "+ (String) opt);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // par_clave_agrecom ::= COMILLAS FILAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Filas "+ (String) vn);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // par_clave_agrecom ::= COMILLAS COLUMNAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Columnas"+ (String) vn);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // par_clave_agrecom ::= error par_clave_agrecom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_agrecom",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // clase ::= CAMPO_TEXTO 
            {
              Object RESULT =null;
		 RESULT="campo_texto"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // clase ::= AREA_TEXTO 
            {
              Object RESULT =null;
		 RESULT="area_texto"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // clase ::= CHECKBOX 
            {
              Object RESULT =null;
		 RESULT="checkbox"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // clase ::= RADIO 
            {
              Object RESULT =null;
		 RESULT="radio"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // clase ::= FICHERO 
            {
              Object RESULT =null;
		 RESULT="fichero"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // clase ::= COMBO 
            {
              Object RESULT =null;
		 RESULT="combo"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // clase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opt ::= VALOR_CADENA 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opt ::= VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=vn ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opt ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // eliminar_componente ::= LLAVE_IZQ COMILLAS PARAMETROS_COMPONENTE COMILLAS DOS_PUNTOS CORCHETE_IZQ LLAVE_IZQ eliminar_comp LLAVE_DER CORCHETE_DER LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_componente",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // eliminar_comp ::= par_clave_elicom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_comp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // eliminar_comp ::= eliminar_comp COMA par_clave_elicom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eliminar_comp",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // par_clave_elicom ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elicom",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // par_clave_elicom ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elicom",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // par_clave_elicom ::= error par_clave_elicom 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_elicom",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
