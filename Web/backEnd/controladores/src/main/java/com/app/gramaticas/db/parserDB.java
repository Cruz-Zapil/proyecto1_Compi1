
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.app.gramaticas.db;

import java.util.ArrayList;
import com.app.recursosdb.Usuario;
import com.app.recursosdb.registro.RegComponent;
import com.app.recursosdb.registro.Registro;
import com.app.recursosdb.trivia.Componente;
import com.app.recursosdb.trivia.Trivia;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserDB extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return simbol.class;
}

  /** Default constructor. */
  @Deprecated
  public parserDB() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserDB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserDB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\005" +
    "\000\002\007\005\000\002\007\007\000\002\023\003\000" +
    "\002\023\005\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\007\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\003\000\002\011\005" +
    "\000\002\011\007\000\002\027\003\000\002\027\005\000" +
    "\002\013\011\000\002\013\011\000\002\013\011\000\002" +
    "\013\007\000\002\013\011\000\002\013\011\000\002\013" +
    "\011\000\002\013\007\000\002\013\007\000\002\013\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\012\005\000\002\014\005\000\002\014" +
    "\007\000\002\021\003\000\002\021\005\000\002\005\011" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\005\011\000\002\005\011\000\002\005\003\000\002" +
    "\004\005\000\002\015\005\000\002\015\007\000\002\024" +
    "\003\000\002\024\005\000\002\016\011\000\002\016\011" +
    "\000\002\016\007\000\002\016\007\000\002\016\011\000" +
    "\002\016\003\000\002\017\005\000\002\017\007\000\002" +
    "\022\003\000\002\022\005\000\002\020\011\000\002\020" +
    "\011\000\002\020\011\000\002\020\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\012\003\005\051\010\052\006\053\007\001" +
    "\002\000\004\002\u0106\001\002\000\012\003\005\051\010" +
    "\052\006\053\007\001\002\000\004\054\322\001\002\000" +
    "\004\054\212\001\002\000\004\054\012\001\002\000\004" +
    "\002\000\001\002\000\004\037\014\001\002\000\006\043" +
    "\204\055\205\001\002\000\006\003\015\036\017\001\002" +
    "\000\006\040\ufff0\043\ufff0\001\002\000\006\040\ufff9\043" +
    "\ufff9\001\002\000\020\006\030\011\027\014\031\015\024" +
    "\044\032\047\025\060\026\001\002\000\006\040\022\043" +
    "\021\001\002\000\006\003\015\036\017\001\002\000\006" +
    "\043\ufffb\055\ufffb\001\002\000\006\040\ufff8\043\ufff8\001" +
    "\002\000\004\036\177\001\002\000\004\036\067\001\002" +
    "\000\004\036\062\001\002\000\004\036\055\001\002\000" +
    "\004\036\043\001\002\000\004\036\040\001\002\000\004" +
    "\036\033\001\002\000\004\041\034\001\002\000\004\036" +
    "\035\001\002\000\004\045\036\001\002\000\004\036\037" +
    "\001\002\000\006\040\ufff7\043\ufff7\001\002\000\004\041" +
    "\041\001\002\000\004\046\042\001\002\000\006\040\ufff4" +
    "\043\ufff4\001\002\000\004\041\044\001\002\000\004\036" +
    "\045\001\002\000\014\003\050\004\047\017\052\034\053" +
    "\046\046\001\002\000\004\036\uffba\001\002\000\004\036" +
    "\uffb9\001\002\000\004\036\uffb7\001\002\000\004\036\054" +
    "\001\002\000\004\036\uffb8\001\002\000\004\036\uffbb\001" +
    "\002\000\006\040\ufff3\043\ufff3\001\002\000\004\041\056" +
    "\001\002\000\004\036\057\001\002\000\014\003\050\004" +
    "\047\017\052\034\053\046\046\001\002\000\004\036\061" +
    "\001\002\000\006\040\ufff6\043\ufff6\001\002\000\004\041" +
    "\063\001\002\000\004\036\064\001\002\000\004\016\065" +
    "\001\002\000\004\036\066\001\002\000\006\040\ufff2\043" +
    "\ufff2\001\002\000\004\041\070\001\002\000\004\054\071" +
    "\001\002\000\004\037\072\001\002\000\006\003\077\036" +
    "\102\001\002\000\006\043\074\055\075\001\002\000\004" +
    "\037\076\001\002\000\006\040\ufff1\043\ufff1\001\002\000" +
    "\006\003\077\036\102\001\002\000\006\040\uffe2\043\uffe2" +
    "\001\002\000\006\040\uffed\043\uffed\001\002\000\006\040" +
    "\173\043\172\001\002\000\024\010\111\013\103\020\112" +
    "\023\106\031\105\032\104\033\107\035\110\042\113\001" +
    "\002\000\004\036\165\001\002\000\004\036\162\001\002" +
    "\000\004\036\155\001\002\000\004\036\150\001\002\000" +
    "\004\036\145\001\002\000\004\036\142\001\002\000\004" +
    "\036\135\001\002\000\004\036\121\001\002\000\004\036" +
    "\114\001\002\000\004\041\115\001\002\000\004\036\116" +
    "\001\002\000\004\045\117\001\002\000\004\036\120\001" +
    "\002\000\006\040\uffeb\043\uffeb\001\002\000\004\041\122" +
    "\001\002\000\004\036\123\001\002\000\020\003\125\021" +
    "\127\024\130\025\126\026\124\027\131\030\132\001\002" +
    "\000\004\036\uffde\001\002\000\004\036\uffdb\001\002\000" +
    "\004\036\uffdf\001\002\000\004\036\uffe1\001\002\000\004" +
    "\036\uffe0\001\002\000\004\036\uffdc\001\002\000\004\036" +
    "\uffdd\001\002\000\004\036\134\001\002\000\006\040\uffe9" +
    "\043\uffe9\001\002\000\004\041\136\001\002\000\004\036" +
    "\137\001\002\000\014\003\050\004\047\017\052\034\053" +
    "\046\046\001\002\000\004\036\141\001\002\000\006\040" +
    "\uffe7\043\uffe7\001\002\000\004\041\143\001\002\000\004" +
    "\046\144\001\002\000\006\040\uffe8\043\uffe8\001\002\000" +
    "\004\041\146\001\002\000\004\046\147\001\002\000\006" +
    "\040\uffe3\043\uffe3\001\002\000\004\041\151\001\002\000" +
    "\004\036\152\001\002\000\014\003\050\004\047\017\052" +
    "\034\053\046\046\001\002\000\004\036\154\001\002\000" +
    "\006\040\uffe6\043\uffe6\001\002\000\004\041\156\001\002" +
    "\000\004\036\157\001\002\000\014\003\050\004\047\017" +
    "\052\034\053\046\046\001\002\000\004\036\161\001\002" +
    "\000\006\040\uffe5\043\uffe5\001\002\000\004\041\163\001" +
    "\002\000\004\046\164\001\002\000\006\040\uffe4\043\uffe4" +
    "\001\002\000\004\041\166\001\002\000\004\036\167\001" +
    "\002\000\004\045\170\001\002\000\004\036\171\001\002" +
    "\000\006\040\uffea\043\uffea\001\002\000\006\003\077\036" +
    "\102\001\002\000\006\043\uffee\055\uffee\001\002\000\006" +
    "\040\uffec\043\uffec\001\002\000\006\040\176\043\172\001" +
    "\002\000\006\043\uffef\055\uffef\001\002\000\004\041\200" +
    "\001\002\000\004\036\201\001\002\000\014\003\050\004" +
    "\047\017\052\034\053\046\046\001\002\000\004\036\203" +
    "\001\002\000\006\040\ufff5\043\ufff5\001\002\000\004\037" +
    "\206\001\002\000\004\002\ufffc\001\002\000\006\003\015" +
    "\036\017\001\002\000\006\040\210\043\021\001\002\000" +
    "\006\043\ufffa\055\ufffa\001\002\000\004\002\ufffe\001\002" +
    "\000\004\037\214\001\002\000\006\043\314\055\315\001" +
    "\002\000\006\003\215\036\220\001\002\000\006\040\uffc4" +
    "\043\uffc4\001\002\000\006\040\312\043\311\001\002\000" +
    "\006\040\uffcb\043\uffcb\001\002\000\014\005\221\014\224" +
    "\044\225\056\222\061\223\001\002\000\004\036\304\001" +
    "\002\000\004\036\241\001\002\000\004\036\236\001\002" +
    "\000\004\036\233\001\002\000\004\036\226\001\002\000" +
    "\004\041\227\001\002\000\004\036\230\001\002\000\004" +
    "\045\231\001\002\000\004\036\232\001\002\000\006\040" +
    "\uffc9\043\uffc9\001\002\000\004\041\234\001\002\000\004" +
    "\046\235\001\002\000\006\040\uffc6\043\uffc6\001\002\000" +
    "\004\041\237\001\002\000\004\046\240\001\002\000\006" +
    "\040\uffc7\043\uffc7\001\002\000\004\041\242\001\002\000" +
    "\004\054\243\001\002\000\004\037\244\001\002\000\006" +
    "\003\252\036\254\001\002\000\006\043\246\055\247\001" +
    "\002\000\004\037\250\001\002\000\006\040\uffc5\043\uffc5" +
    "\001\002\000\006\003\252\036\254\001\002\000\006\040" +
    "\uffc1\043\uffc1\001\002\000\006\040\uffbc\043\uffbc\001\002" +
    "\000\006\040\300\043\277\001\002\000\010\023\256\042" +
    "\255\050\257\001\002\000\004\036\272\001\002\000\004" +
    "\036\265\001\002\000\004\036\260\001\002\000\004\041" +
    "\261\001\002\000\004\036\262\001\002\000\014\003\050" +
    "\004\047\017\052\034\053\046\046\001\002\000\004\036" +
    "\264\001\002\000\006\040\uffbe\043\uffbe\001\002\000\004" +
    "\041\266\001\002\000\004\036\267\001\002\000\014\003" +
    "\050\004\047\017\052\034\053\046\046\001\002\000\004" +
    "\036\271\001\002\000\006\040\uffbd\043\uffbd\001\002\000" +
    "\004\041\273\001\002\000\004\036\274\001\002\000\004" +
    "\045\275\001\002\000\004\036\276\001\002\000\006\040" +
    "\uffbf\043\uffbf\001\002\000\006\003\252\036\254\001\002" +
    "\000\006\043\uffc2\055\uffc2\001\002\000\006\040\uffc0\043" +
    "\uffc0\001\002\000\006\040\303\043\277\001\002\000\006" +
    "\043\uffc3\055\uffc3\001\002\000\004\041\305\001\002\000" +
    "\004\036\306\001\002\000\014\003\050\004\047\017\052" +
    "\034\053\046\046\001\002\000\004\036\310\001\002\000" +
    "\006\040\uffc8\043\uffc8\001\002\000\006\003\215\036\220" +
    "\001\002\000\006\043\uffcd\055\uffcd\001\002\000\006\040" +
    "\uffca\043\uffca\001\002\000\004\037\316\001\002\000\004" +
    "\002\uffce\001\002\000\006\003\215\036\220\001\002\000" +
    "\006\040\320\043\311\001\002\000\006\043\uffcc\055\uffcc" +
    "\001\002\000\004\002\uffff\001\002\000\004\037\324\001" +
    "\002\000\006\043\u0100\055\u0101\001\002\000\006\003\325" +
    "\036\330\001\002\000\006\040\uffcf\043\uffcf\001\002\000" +
    "\006\040\376\043\375\001\002\000\006\040\uffd7\043\uffd7" +
    "\001\002\000\016\005\332\007\336\011\334\012\335\057" +
    "\331\060\333\001\002\000\004\036\370\001\002\000\004" +
    "\036\363\001\002\000\004\036\356\001\002\000\004\036" +
    "\351\001\002\000\004\036\344\001\002\000\004\036\337" +
    "\001\002\000\004\041\340\001\002\000\004\036\341\001" +
    "\002\000\014\003\050\004\047\017\052\034\053\046\046" +
    "\001\002\000\004\036\343\001\002\000\006\040\uffd4\043" +
    "\uffd4\001\002\000\004\041\345\001\002\000\004\036\346" +
    "\001\002\000\014\003\050\004\047\017\052\034\053\046" +
    "\046\001\002\000\004\036\350\001\002\000\006\040\uffd2" +
    "\043\uffd2\001\002\000\004\041\352\001\002\000\004\036" +
    "\353\001\002\000\014\003\050\004\047\017\052\034\053" +
    "\046\046\001\002\000\004\036\355\001\002\000\006\040" +
    "\uffd3\043\uffd3\001\002\000\004\041\357\001\002\000\004" +
    "\036\360\001\002\000\004\016\361\001\002\000\004\036" +
    "\362\001\002\000\006\040\uffd1\043\uffd1\001\002\000\004" +
    "\041\364\001\002\000\004\036\365\001\002\000\014\003" +
    "\050\004\047\017\052\034\053\046\046\001\002\000\004" +
    "\036\367\001\002\000\006\040\uffd5\043\uffd5\001\002\000" +
    "\004\041\371\001\002\000\004\036\372\001\002\000\004" +
    "\016\373\001\002\000\004\036\374\001\002\000\006\040" +
    "\uffd0\043\uffd0\001\002\000\006\003\325\036\330\001\002" +
    "\000\006\043\uffd9\055\uffd9\001\002\000\006\040\uffd6\043" +
    "\uffd6\001\002\000\004\037\u0102\001\002\000\004\002\uffda" +
    "\001\002\000\006\003\325\036\330\001\002\000\006\040" +
    "\u0104\043\375\001\002\000\006\043\uffd8\055\uffd8\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\002\u0104\001\001\000\004\012\320\001\001\000\004" +
    "\004\210\001\001\000\004\003\010\001\001\000\002\001" +
    "\001\000\004\007\012\001\001\000\002\001\001\000\006" +
    "\010\015\023\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\072\001\001\000" +
    "\006\013\077\027\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\077\027\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\015\023\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\212\001\001\000\002" +
    "\001\001\000\006\016\216\024\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\244\001\001" +
    "\000\006\020\250\022\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\250\022\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\216\024\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\322\001\001\000\002\001\001\000\006\005\326\021" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\326\021\u0102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    } 

    /// metodo para recopilar info de la db de usuario

        private String usu;
        private String pass;
        private String name;
        private String inst;
        private String fecha_c;
        private String fecha_mod;
        private ArrayList<Usuario> usuarios = new ArrayList<Usuario>();

        public ArrayList<Usuario> getUsuarios(){
            return usuarios;
        }

        /// metodo para recopilar info de la db de trivia
        private String idTri;        
        private String nombreTri;
        private Integer tiempoTri;
        private String usuaCreaTri;
        private String temaTri;
        private String fechaCreaTri;

        private ArrayList<Trivia> trivias = new ArrayList<Trivia>();

        public ArrayList<Trivia> getTrivias(){
            return trivias;
        }


        /// metodo para recopilar info de la db de componente

        private String idComp;
        private String idTriComp;
        private String claseComp;
        private int indiceComp;
        private String txtVisComp;
        private String opcionesComp;
        private int filasComp;
        private int columnasComp;
        private String resComp;

        private ArrayList<ArrayList<Componente>> componentes = new ArrayList< ArrayList<Componente>>();
        private ArrayList<Componente> tmpComp = new ArrayList<Componente>();

     

        /// metodo para recopilar info de la db de registro
        private String idReg;
        private String idTriReg;
        private String idUsuReg;
        private int puntReg;
        private int tmpTotal;


        private ArrayList<Registro> registros = new ArrayList<Registro>();
        private ArrayList <ArrayList<RegComponent>> regComp =  new ArrayList<ArrayList<RegComponent>>();
        private ArrayList<RegComponent> tmpReg = new ArrayList<RegComponent>();


        private String idCompReg;
        private String regCompReg;
        private String resCompReg;
        private int contReg = -1;
        private int contador = -1;

        public ArrayList<Registro> getRegistros(){
            return registros;
        }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parserDB parser;

  /** Constructor */
  CUP$parser$actions(parserDB parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= DBTRIVIA db_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= DBUSUARIO db_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= DBREGISTRO db_registro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // db_trivia ::= CORCHETE_IZQ inf_trivia CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_trivia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inf_trivia ::= LLAVE_IZQ tri LLAVE_DER 
            {
              Object RESULT =null;
		 
              componentes.add(tmpComp);
              contador++;
          
              if (componentes.get(contador).size() !=0){
                trivias.add(new Trivia(idTri, nombreTri,  tiempoTri, usuaCreaTri, temaTri, fechaCreaTri  , componentes.get(contador)));
              }else {
                // no hay componentes para una trivia
                System.out.println("componentes vacios");
                trivias.add(new Trivia(idTri, nombreTri,  tiempoTri, usuaCreaTri, temaTri, fechaCreaTri  , null));
              }
              tmpComp = new ArrayList<Componente>();

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_trivia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inf_trivia ::= inf_trivia COMA LLAVE_IZQ tri LLAVE_DER 
            {
              Object RESULT =null;
		  
        
              componentes.add(tmpComp);
              contador++;
          
              if (componentes.get(contador).size() !=0){
                trivias.add(new Trivia(idTri, nombreTri,  tiempoTri, usuaCreaTri, temaTri, fechaCreaTri  , componentes.get(contador)));
              }else {
                // no hay componentes para una trivia
                System.out.println("componentes vacios");
                trivias.add(new Trivia(idTri, nombreTri,  tiempoTri, usuaCreaTri, temaTri, fechaCreaTri  , null));
              }
              tmpComp = new ArrayList<Componente>();
            
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_trivia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tri ::= par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tri",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tri ::= tri COMA par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tri",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // par_clave_trivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idTleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idTright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idT = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  idTri = (String) idT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // par_clave_trivia ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  nombreTri = (String) vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par_clave_trivia ::= COMILLAS TEMA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 temaTri = (String)vc;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // par_clave_trivia ::= COMILLAS TIEMPO COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		tiempoTri = Integer.parseInt(vn.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // par_clave_trivia ::= COMILLAS USUARIO_CREACION COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 usuaCreaTri = (String) vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // par_clave_trivia ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fechaCreaTri = (String) vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // par_clave_trivia ::= COMILLAS ESTRUCTURA COMILLAS DOS_PUNTOS CORCHETE_IZQ estruct CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // par_clave_trivia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estruct ::= LLAVE_IZQ clave_comp LLAVE_DER 
            {
              Object RESULT =null;
		  
 tmpComp.add(new Componente(idComp, idTriComp, claseComp, indiceComp, txtVisComp, resComp, opcionesComp, filasComp, columnasComp)); 
 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estruct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estruct ::= estruct COMA LLAVE_IZQ clave_comp LLAVE_DER 
            {
              Object RESULT =null;
		  
         tmpComp.add(new Componente(idComp, idTriComp, claseComp, indiceComp, txtVisComp, resComp, opcionesComp, filasComp, columnasComp)); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estruct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // clave_comp ::= component 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clave_comp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // clave_comp ::= clave_comp COMA component 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clave_comp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // component ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("--->" + (String)id  ); idComp =(String) id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // component ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("--->" + (String)  ids); idTriComp =(String) ids; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // component ::= COMILLAS CLASE COMILLAS DOS_PUNTOS COMILLAS clase COMILLAS 
            {
              Object RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("--->" + (String)cls  ); claseComp =(String) cls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // component ::= COMILLAS INDICE COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("--->" + (String)  vn); indiceComp = Integer.parseInt(vn.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // component ::= COMILLAS TEXTO_VISIBLE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("--->" + (String) vc ); txtVisComp =(String) vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // component ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("--->" + (String) ot ); resComp =(String) ot; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // component ::= COMILLAS OPCIONES COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("--->" + (String) ot ); opcionesComp =(String) ot; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // component ::= COMILLAS FILAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("--->" + (String) vn ); filasComp = Integer.parseInt(vn.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // component ::= COMILLAS COLUMNAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("--->" + (String) vn ); columnasComp = Integer.parseInt(vn.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // component ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // clase ::= CAMPO_TEXTO 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ct; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // clase ::= AREA_TEXTO 
            {
              Object RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=at; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // clase ::= CHECKBOX 
            {
              Object RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=cb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // clase ::= RADIO 
            {
              Object RESULT =null;
		int raleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int raright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ra; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // clase ::= FICHERO 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=fi; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // clase ::= COMBO 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=com;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // clase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // db_usuario ::= CORCHETE_IZQ inf_usu CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_usuario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inf_usu ::= LLAVE_IZQ usu LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println(" crear un usuario con los parametros recopilados "); usuarios.add( new Usuario(usu, pass, name, inst, fecha_c,fecha_mod)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_usu",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inf_usu ::= inf_usu COMA LLAVE_IZQ usu LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println(" crear un usuario con los parametros recopilados "); usuarios.add( new Usuario(usu, pass, name, inst, fecha_c,fecha_mod)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_usu",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // usu ::= par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usu",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // usu ::= usu COMA par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usu",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // par_clave_usu ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 usu= (String)u; System.out.println(" \n usuario"+ usu); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // par_clave_usu ::= COMILLAS PASSWORD COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pass= (String)p; System.out.println(" \n pass "+ pass); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // par_clave_usu ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 name= (String)n; System.out.println(" \n nombre "+ name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // par_clave_usu ::= COMILLAS INSTITUCION COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 inst= (String)i; System.out.println(" \n institucion "+ inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // par_clave_usu ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fecha_c= (String)fc; System.out.println(" \n fecha creacion "+ fecha_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // par_clave_usu ::= COMILLAS FECHA_MODIFICACION COMILLAS DOS_PUNTOS COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fecha_mod= (String)fm; System.out.println(" \n fecha modificacion "+ fecha_mod); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // par_clave_usu ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // db_registro ::= CORCHETE_IZQ inf_reg CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_registro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inf_reg ::= LLAVE_IZQ reg LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("un nuevo paquete de datos");  

                regComp.add(tmpReg);
                contReg++;
          
              if (regComp.get(contReg).size() !=0){
                registros.add(new Registro( idTriReg, idUsuReg, tmpTotal,puntReg, regComp.get(contReg)));
              }else {
                // no hay componentes para una trivia
                System.out.println("componentes vacios");
                registros.add(new Registro( idTriReg, idUsuReg, tmpTotal,puntReg, null));
              }
              tmpReg = new ArrayList<RegComponent>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_reg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inf_reg ::= inf_reg COMA LLAVE_IZQ reg LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println(" COMA un nuevo paquete de datos");
          
           regComp.add(tmpReg);
                contReg++;
          
              if (regComp.get(contReg).size() !=0){
                registros.add(new Registro(idTriReg, idUsuReg,tmpTotal,puntReg, regComp.get(contReg)));
              }else {
                // no hay componentes para una trivia
                System.out.println("componentes vacios");
                registros.add(new Registro( idTriReg, idUsuReg, tmpTotal ,puntReg, null));
              }
              tmpReg = new ArrayList<RegComponent>();

          
          
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_reg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reg ::= par_clave_reg 
            {
              Object RESULT =null;
		 System.out.println("PRIMER PAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reg ::= reg COMA par_clave_reg 
            {
              Object RESULT =null;
		 System.out.println("COMA PAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // par_clave_reg ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 idTriReg = (String) id;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // par_clave_reg ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 idUsuReg = (String) op;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // par_clave_reg ::= COMILLAS PUNTEO COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 puntReg  = Integer.parseInt(vn.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // par_clave_reg ::= COMILLAS TIEMPO COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tmpTotal = Integer.parseInt(vn.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // par_clave_reg ::= COMILLAS RESPUESTAS COMILLAS DOS_PUNTOS CORCHETE_IZQ registros CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // par_clave_reg ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // registros ::= LLAVE_IZQ res LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("add reg"); tmpReg.add(new RegComponent(idCompReg,regCompReg, resCompReg));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // registros ::= registros COMA LLAVE_IZQ res LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("add reg"); tmpReg.add(new RegComponent(idCompReg,regCompReg, resCompReg)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // res ::= par_clave_resp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // res ::= res COMA par_clave_resp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // par_clave_resp ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 idCompReg=  (String)ids; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // par_clave_resp ::= COMILLAS REGISTRO COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 regCompReg= (String) op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // par_clave_resp ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 resCompReg= (String) op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // par_clave_resp ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opt ::= OPTIONS 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = opt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opt ::= VALOR_NUMERO 
            {
              Object RESULT =null;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opt ::= VALOR_CADENA 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opt ::= PREGUNTA 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // opt ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
