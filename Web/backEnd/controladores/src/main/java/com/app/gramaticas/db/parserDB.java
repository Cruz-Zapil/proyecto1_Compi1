
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.app.gramaticas.db;

import java.util.ArrayList;

import com.app.recursosdb.Usuario;

import java_cup.runtime.*;


/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserDB extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return simbol.class;

}

  /** Default constructor. */
  @Deprecated
  public parserDB() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserDB(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserDB(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\005" +
    "\000\002\007\005\000\002\007\007\000\002\023\003\000" +
    "\002\023\005\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\007\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\003\000\002\011\005" +
    "\000\002\011\007\000\002\013\011\000\002\013\011\000" +
    "\002\013\011\000\002\013\007\000\002\013\011\000\002" +
    "\013\011\000\002\013\011\000\002\013\007\000\002\013" +
    "\007\000\002\013\004\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\012\005\000\002" +
    "\014\005\000\002\014\007\000\002\021\003\000\002\021" +
    "\005\000\002\005\011\000\002\005\011\000\002\005\011" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\005\003\000\002\004\005\000\002\015\005\000\002" +
    "\015\007\000\002\024\003\000\002\024\005\000\002\016" +
    "\011\000\002\016\011\000\002\016\011\000\002\016\003" +
    "\000\002\017\005\000\002\017\007\000\002\022\003\000" +
    "\002\022\005\000\002\020\011\000\002\020\011\000\002" +
    "\020\011\000\002\020\003\000\002\025\003\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\012\003\005\050\010\051\006\052\007\001" +
    "\002\000\004\002\371\001\002\000\012\003\005\050\010" +
    "\051\006\052\007\001\002\000\004\053\305\001\002\000" +
    "\004\053\205\001\002\000\004\053\012\001\002\000\004" +
    "\002\000\001\002\000\004\036\014\001\002\000\006\042" +
    "\177\054\200\001\002\000\006\003\015\035\017\001\002" +
    "\000\006\037\ufff0\042\ufff0\001\002\000\006\037\ufff9\042" +
    "\ufff9\001\002\000\020\006\030\011\027\014\031\015\024" +
    "\043\032\046\025\057\026\001\002\000\006\037\022\042" +
    "\021\001\002\000\006\003\015\035\017\001\002\000\006" +
    "\042\ufffb\054\ufffb\001\002\000\006\037\ufff8\042\ufff8\001" +
    "\002\000\004\035\172\001\002\000\004\035\064\001\002" +
    "\000\004\035\057\001\002\000\004\035\050\001\002\000" +
    "\004\035\043\001\002\000\004\035\040\001\002\000\004" +
    "\035\033\001\002\000\004\040\034\001\002\000\004\035" +
    "\035\001\002\000\004\044\036\001\002\000\004\035\037" +
    "\001\002\000\006\037\ufff7\042\ufff7\001\002\000\004\040" +
    "\041\001\002\000\004\045\042\001\002\000\006\037\ufff4" +
    "\042\ufff4\001\002\000\004\040\044\001\002\000\004\035" +
    "\045\001\002\000\004\004\046\001\002\000\004\035\047" +
    "\001\002\000\006\037\ufff3\042\ufff3\001\002\000\004\040" +
    "\051\001\002\000\004\035\052\001\002\000\006\004\053" +
    "\033\055\001\002\000\004\035\uffbe\001\002\000\004\035" +
    "\056\001\002\000\004\035\uffbf\001\002\000\006\037\ufff6" +
    "\042\ufff6\001\002\000\004\040\060\001\002\000\004\035" +
    "\061\001\002\000\004\004\062\001\002\000\004\035\063" +
    "\001\002\000\006\037\ufff2\042\ufff2\001\002\000\004\040" +
    "\065\001\002\000\004\053\066\001\002\000\004\036\067" +
    "\001\002\000\006\003\074\035\076\001\002\000\006\042" +
    "\071\054\072\001\002\000\004\036\073\001\002\000\006" +
    "\037\ufff1\042\ufff1\001\002\000\006\003\074\035\076\001" +
    "\002\000\006\003\074\035\076\001\002\000\004\037\166" +
    "\001\002\000\024\010\105\013\077\017\106\022\102\030" +
    "\101\031\100\032\103\034\104\041\107\001\002\000\004" +
    "\035\161\001\002\000\004\035\156\001\002\000\004\035" +
    "\151\001\002\000\004\035\144\001\002\000\004\035\141" +
    "\001\002\000\004\035\136\001\002\000\004\035\131\001" +
    "\002\000\004\035\115\001\002\000\004\035\110\001\002" +
    "\000\004\040\111\001\002\000\004\035\112\001\002\000" +
    "\004\044\113\001\002\000\004\035\114\001\002\000\004" +
    "\037\uffed\001\002\000\004\040\116\001\002\000\004\035" +
    "\117\001\002\000\020\003\121\020\123\023\124\024\122" +
    "\025\120\026\125\027\126\001\002\000\004\035\uffe0\001" +
    "\002\000\004\035\uffdd\001\002\000\004\035\uffe1\001\002" +
    "\000\004\035\uffe3\001\002\000\004\035\uffe2\001\002\000" +
    "\004\035\uffde\001\002\000\004\035\uffdf\001\002\000\004" +
    "\035\130\001\002\000\004\037\uffeb\001\002\000\004\040" +
    "\132\001\002\000\004\035\133\001\002\000\004\004\134" +
    "\001\002\000\004\035\135\001\002\000\004\037\uffe9\001" +
    "\002\000\004\040\137\001\002\000\004\045\140\001\002" +
    "\000\004\037\uffea\001\002\000\004\040\142\001\002\000" +
    "\004\045\143\001\002\000\004\037\uffe5\001\002\000\004" +
    "\040\145\001\002\000\004\035\146\001\002\000\006\004" +
    "\053\033\055\001\002\000\004\035\150\001\002\000\004" +
    "\037\uffe8\001\002\000\004\040\152\001\002\000\004\035" +
    "\153\001\002\000\006\004\053\033\055\001\002\000\004" +
    "\035\155\001\002\000\004\037\uffe7\001\002\000\004\040" +
    "\157\001\002\000\004\045\160\001\002\000\004\037\uffe6" +
    "\001\002\000\004\040\162\001\002\000\004\035\163\001" +
    "\002\000\004\044\164\001\002\000\004\035\165\001\002" +
    "\000\004\037\uffec\001\002\000\006\042\uffee\054\uffee\001" +
    "\002\000\004\037\uffe4\001\002\000\004\037\171\001\002" +
    "\000\006\042\uffef\054\uffef\001\002\000\004\040\173\001" +
    "\002\000\004\035\174\001\002\000\006\004\053\033\055" +
    "\001\002\000\004\035\176\001\002\000\006\037\ufff5\042" +
    "\ufff5\001\002\000\004\036\201\001\002\000\004\002\ufffc" +
    "\001\002\000\006\003\015\035\017\001\002\000\006\037" +
    "\203\042\021\001\002\000\006\042\ufffa\054\ufffa\001\002" +
    "\000\004\002\ufffe\001\002\000\004\036\207\001\002\000" +
    "\006\042\277\054\300\001\002\000\006\003\210\035\213" +
    "\001\002\000\006\037\uffc8\042\uffc8\001\002\000\006\037" +
    "\275\042\274\001\002\000\006\037\uffcd\042\uffcd\001\002" +
    "\000\010\005\214\043\216\055\215\001\002\000\004\035" +
    "\267\001\002\000\004\035\224\001\002\000\004\035\217" +
    "\001\002\000\004\040\220\001\002\000\004\035\221\001" +
    "\002\000\004\044\222\001\002\000\004\035\223\001\002" +
    "\000\006\037\uffcb\042\uffcb\001\002\000\004\040\225\001" +
    "\002\000\004\053\226\001\002\000\004\036\227\001\002" +
    "\000\006\003\235\035\237\001\002\000\006\042\231\054" +
    "\232\001\002\000\004\036\233\001\002\000\006\037\uffc9" +
    "\042\uffc9\001\002\000\006\003\235\035\237\001\002\000" +
    "\006\037\uffc5\042\uffc5\001\002\000\006\037\uffc0\042\uffc0" +
    "\001\002\000\006\037\263\042\262\001\002\000\010\022" +
    "\241\041\240\047\242\001\002\000\004\035\255\001\002" +
    "\000\004\035\250\001\002\000\004\035\243\001\002\000" +
    "\004\040\244\001\002\000\004\035\245\001\002\000\006" +
    "\004\053\033\055\001\002\000\004\035\247\001\002\000" +
    "\006\037\uffc2\042\uffc2\001\002\000\004\040\251\001\002" +
    "\000\004\035\252\001\002\000\006\004\053\033\055\001" +
    "\002\000\004\035\254\001\002\000\006\037\uffc1\042\uffc1" +
    "\001\002\000\004\040\256\001\002\000\004\035\257\001" +
    "\002\000\004\044\260\001\002\000\004\035\261\001\002" +
    "\000\006\037\uffc3\042\uffc3\001\002\000\006\003\235\035" +
    "\237\001\002\000\006\042\uffc6\054\uffc6\001\002\000\006" +
    "\037\uffc4\042\uffc4\001\002\000\006\037\266\042\262\001" +
    "\002\000\006\042\uffc7\054\uffc7\001\002\000\004\040\270" +
    "\001\002\000\004\035\271\001\002\000\006\004\053\033" +
    "\055\001\002\000\004\035\273\001\002\000\006\037\uffca" +
    "\042\uffca\001\002\000\006\003\210\035\213\001\002\000" +
    "\006\042\uffcf\054\uffcf\001\002\000\006\037\uffcc\042\uffcc" +
    "\001\002\000\004\036\301\001\002\000\004\002\uffd0\001" +
    "\002\000\006\003\210\035\213\001\002\000\006\037\303" +
    "\042\274\001\002\000\006\042\uffce\054\uffce\001\002\000" +
    "\004\002\uffff\001\002\000\004\036\307\001\002\000\006" +
    "\042\363\054\364\001\002\000\006\003\310\035\313\001" +
    "\002\000\006\037\uffd1\042\uffd1\001\002\000\006\037\361" +
    "\042\360\001\002\000\006\037\uffd9\042\uffd9\001\002\000" +
    "\016\005\315\007\321\011\317\012\320\056\314\057\316" +
    "\001\002\000\004\035\353\001\002\000\004\035\346\001" +
    "\002\000\004\035\341\001\002\000\004\035\334\001\002" +
    "\000\004\035\327\001\002\000\004\035\322\001\002\000" +
    "\004\040\323\001\002\000\004\035\324\001\002\000\006" +
    "\004\053\033\055\001\002\000\004\035\326\001\002\000" +
    "\006\037\uffd6\042\uffd6\001\002\000\004\040\330\001\002" +
    "\000\004\035\331\001\002\000\006\004\053\033\055\001" +
    "\002\000\004\035\333\001\002\000\006\037\uffd4\042\uffd4" +
    "\001\002\000\004\040\335\001\002\000\004\035\336\001" +
    "\002\000\006\004\053\033\055\001\002\000\004\035\340" +
    "\001\002\000\006\037\uffd5\042\uffd5\001\002\000\004\040" +
    "\342\001\002\000\004\035\343\001\002\000\004\016\344" +
    "\001\002\000\004\035\345\001\002\000\006\037\uffd3\042" +
    "\uffd3\001\002\000\004\040\347\001\002\000\004\035\350" +
    "\001\002\000\006\004\053\033\055\001\002\000\004\035" +
    "\352\001\002\000\006\037\uffd7\042\uffd7\001\002\000\004" +
    "\040\354\001\002\000\004\035\355\001\002\000\004\016" +
    "\356\001\002\000\004\035\357\001\002\000\006\037\uffd2" +
    "\042\uffd2\001\002\000\006\003\310\035\313\001\002\000" +
    "\006\042\uffdb\054\uffdb\001\002\000\006\037\uffd8\042\uffd8" +
    "\001\002\000\004\036\365\001\002\000\004\002\uffdc\001" +
    "\002\000\006\003\310\035\313\001\002\000\006\037\367" +
    "\042\360\001\002\000\006\042\uffda\054\uffda\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\002\367\001\001\000\004\012\303\001\001\000\004" +
    "\004\203\001\001\000\004\003\010\001\001\000\002\001" +
    "\001\000\004\007\012\001\001\000\002\001\001\000\006" +
    "\010\015\023\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\067\001\001\000\004" +
    "\013\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\074\001\001\000\004\013\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\015" +
    "\023\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\205\001\001\000\002\001\001" +
    "\000\006\016\211\024\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\227\001\001\000\006\020\233\022\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\233\022\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\211" +
    "\024\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\305\001\001\000\002\001\001" +
    "\000\006\005\311\021\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\311\021\365\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    } 

    /// metodo para recopilar info de la db 

        private String usu;
        private String pass;
        private String name;
        private String inst;
        private String fecha_c;
        private String fecha_mod;
        private ArrayList<Usuario> usuarios = new ArrayList<Usuario>();

        public ArrayList<Usuario> getUsuarios(){
            return usuarios;
        }
    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parserDB parser;

  /** Constructor */
  CUP$parser$actions(parserDB parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= DBTRIVIA db_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= DBUSUARIO db_usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= DBREGISTRO db_registro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // db_trivia ::= CORCHETE_IZQ inf_trivia CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_trivia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inf_trivia ::= LLAVE_IZQ tri LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_trivia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inf_trivia ::= inf_trivia COMA LLAVE_IZQ tri LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_trivia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tri ::= par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tri",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tri ::= tri COMA par_clave_trivia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tri",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // par_clave_trivia ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // par_clave_trivia ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // par_clave_trivia ::= COMILLAS TEMA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // par_clave_trivia ::= COMILLAS TIEMPO COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // par_clave_trivia ::= COMILLAS USUARIO_CREACION COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // par_clave_trivia ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // par_clave_trivia ::= COMILLAS ESTRUCTURA COMILLAS DOS_PUNTOS CORCHETE_IZQ estruct CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // par_clave_trivia ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_trivia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estruct ::= LLAVE_IZQ component LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estruct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estruct ::= estruct COMA LLAVE_IZQ component LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estruct",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // component ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // component ::= COMILLAS TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // component ::= COMILLAS CLASE COMILLAS DOS_PUNTOS COMILLAS clase COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // component ::= COMILLAS INDICE COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // component ::= COMILLAS TEXTO_VISIBLE COMILLAS DOS_PUNTOS COMILLAS VALOR_CADENA COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // component ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // component ::= COMILLAS OPCIONES COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // component ::= COMILLAS FILAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // component ::= COMILLAS COLUMNAS COMILLAS DOS_PUNTOS VALOR_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // component ::= error component 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // clase ::= CAMPO_TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // clase ::= AREA_TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // clase ::= CHECKBOX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // clase ::= RADIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // clase ::= FICHERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // clase ::= COMBO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // clase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // db_usuario ::= CORCHETE_IZQ inf_usu CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_usuario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inf_usu ::= LLAVE_IZQ usu LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println(" crear un usuario con los parametros recopilados "); usuarios.add( new Usuario(usu, pass, name, inst, fecha_c,fecha_mod)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_usu",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inf_usu ::= inf_usu COMA LLAVE_IZQ usu LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println(" crear un usuario con los parametros recopilados "); usuarios.add( new Usuario(usu, pass, name, inst, fecha_c,fecha_mod)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_usu",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // usu ::= par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usu",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // usu ::= usu COMA par_clave_usu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("usu",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // par_clave_usu ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 usu= (String)u; System.out.println(" \n usuario"+ usu); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // par_clave_usu ::= COMILLAS PASSWORD COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pass= (String)p; System.out.println(" \n pass "+ pass); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // par_clave_usu ::= COMILLAS NOMBRE COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 name= (String)n; System.out.println(" \n nombre "+ name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // par_clave_usu ::= COMILLAS INSTITUCION COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 inst= (String)i; System.out.println(" \n institucion "+ inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // par_clave_usu ::= COMILLAS FECHA_CREACION COMILLAS DOS_PUNTOS COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fecha_c= (String)fc; System.out.println(" \n fecha creacion "+ fecha_c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // par_clave_usu ::= COMILLAS FECHA_MODIFICACION COMILLAS DOS_PUNTOS COMILLAS FECHA COMILLAS 
            {
              Object RESULT =null;
		int fmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 fecha_mod= (String)fm; System.out.println(" \n fecha modificacion "+ fecha_mod); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // par_clave_usu ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_usu",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // db_registro ::= CORCHETE_IZQ inf_reg CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("db_registro",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // inf_reg ::= LLAVE_IZQ reg LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println("un nuevo paquete de datos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_reg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inf_reg ::= inf_reg COMA LLAVE_IZQ reg LLAVE_DER 
            {
              Object RESULT =null;
		 System.out.println(" COMA un nuevo paquete de datos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inf_reg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reg ::= par_clave_reg 
            {
              Object RESULT =null;
		 System.out.println("PRIMER PAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reg ::= reg COMA par_clave_reg 
            {
              Object RESULT =null;
		 System.out.println("COMA PAR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reg",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // par_clave_reg ::= COMILLAS ID_TRIVIA COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // par_clave_reg ::= COMILLAS USUARIO COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // par_clave_reg ::= COMILLAS RESPUESTAS COMILLAS DOS_PUNTOS CORCHETE_IZQ registros CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // par_clave_reg ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_reg",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // registros ::= LLAVE_IZQ res LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // registros ::= registros COMA LLAVE_IZQ res LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("registros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // res ::= par_clave_resp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // res ::= res COMA par_clave_resp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("res",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // par_clave_resp ::= COMILLAS ID COMILLAS DOS_PUNTOS COMILLAS IDS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // par_clave_resp ::= COMILLAS REGISTRO COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // par_clave_resp ::= COMILLAS RESPUESTA COMILLAS DOS_PUNTOS COMILLAS opt COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // par_clave_resp ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("par_clave_resp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // opt ::= OPTIONS 
            {
              Object RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = opt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt ::= VALOR_CADENA 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = vc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
