package com.app.gramaticas.xson;

// DO NOT EDIT

// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerXson.lex

import java_cup.runtime.Symbol;

import com.app.gramaticas.Errorx;
import com.app.gramaticas.ReporteError;

/* Archivo Lexer.flex */

@SuppressWarnings("fallthrough")
public class LexerXson implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 = "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 = "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5" +
      "\1\6\1\0\1\7\1\10\6\0\1\11\1\12\2\0" +
      "\1\13\1\14\10\15\1\16\1\0\1\17\1\20\1\21" +
      "\1\22\1\0\1\23\1\24\1\25\1\26\1\27\1\30" +
      "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
      "\1\41\1\42\1\34\1\43\1\44\1\45\1\46\1\47" +
      "\1\50\1\51\1\34\1\52\1\53\1\0\1\54\1\0" +
      "\1\55\1\0\1\23\1\24\1\25\1\26\1\27\1\30" +
      "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
      "\1\41\1\42\1\34\1\43\1\44\1\45\1\46\1\47" +
      "\1\50\1\51\1\34\1\52\1\56\1\57\1\60\7\0" +
      "\1\3\73\0\1\61\7\0\1\61\3\0\1\61\3\0" +
      "\1\61\1\0\1\61\6\0\1\61\6\0\1\61\7\0" +
      "\1\61\3\0\1\61\3\0\1\61\1\0\1\61\6\0" +
      "\1\61\65\0\2\62\115\0\1\63\u01a8\0\2\3\u0100\0" +
      "\1\64\325\0\u0100\3";

  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5" +
      "\1\6\1\7\1\10\1\11\1\12\20\1\1\13\1\14" +
      "\1\15\1\16\2\1\1\17\2\0\1\20\3\0\1\6" +
      "\1\21\1\22\1\23\1\0\12\21\1\0\1\24\14\21" +
      "\1\0\1\21\1\0\1\21\1\0\1\24\2\0\1\20" +
      "\2\0\1\21\1\22\1\0\1\6\1\25\2\0\11\21" +
      "\1\0\4\21\4\0\2\21\1\0\7\21\1\0\3\21" +
      "\1\0\4\21\2\0\1\21\1\0\1\21\2\0\1\20" +
      "\3\0\1\6\1\0\5\21\1\0\4\21\1\0\3\21" +
      "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21" +
      "\1\0\3\21\1\0\2\21\1\0\1\21\1\0\2\21" +
      "\1\0\1\26\3\21\2\0\1\21\1\0\1\21\1\0" +
      "\1\27\3\0\1\6\1\30\1\21\1\0\2\21\1\0" +
      "\2\31\1\21\1\32\1\21\1\0\1\21\1\0\2\21" +
      "\2\33\3\0\1\21\1\0\1\21\1\0\1\21\1\0" +
      "\1\21\1\0\4\21\1\0\2\21\1\0\2\34\1\21" +
      "\1\0\1\21\1\0\3\21\2\0\1\21\1\0\1\21" +
      "\4\0\1\21\2\0\1\21\1\0\1\21\1\0\1\21" +
      "\2\0\1\21\3\0\2\35\1\21\2\0\1\21\1\0" +
      "\1\36\2\0\1\21\1\0\2\21\1\0\1\21\1\0" +
      "\1\21\2\0\1\21\2\37\1\0\1\21\1\0\1\21" +
      "\4\0\1\21\2\0\1\21\1\0\1\21\1\0\1\21" +
      "\3\0\1\40\1\0\1\40\1\0\1\21\2\0\1\21" +
      "\3\0\1\21\1\0\2\21\1\0\1\21\1\0\1\21" +
      "\3\0\2\41\1\21\7\0\2\42\2\43\1\0\1\21" +
      "\5\0\1\21\2\0\1\21\3\0\2\44\1\21\2\45" +
      "\1\21\1\0\1\21\4\0\1\46\13\0\1\47\1\21" +
      "\2\0\1\21\3\0\1\21\1\0\2\50\5\0\1\51" +
      "\1\0\1\52\1\0\1\53\10\0\1\21\5\0\1\21" +
      "\11\0\1\54\7\0\2\55\32\0\1\56\13\0\1\57" +
      "\6\0\1\60\7\0\1\61\3\0\1\62\5\0\1\63" +
      "\6\0\1\64\11\0\1\65\12\0\1\66\1\67\4\0" +
      "\1\70\4\0\1\71\4\0\1\72\7\0\1\73\1\0" +
      "\1\74\2\0\1\75\1\0\1\76\4\0\1\77\1\0" +
      "\1\100\10\0\1\101\1\0\1\102\3\0\1\103\5\0" +
      "\1\104\2\0\1\105\1\106";

  private static int[] zzUnpackAction() {
    int[] result = new int[589];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\65\0\65\0\65\0\152\0\237\0\324\0\u0109" +
      "\0\65\0\u013e\0\65\0\u0173\0\65\0\u01a8\0\u01dd\0\u0212" +
      "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba" +
      "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\65\0\65" +
      "\0\65\0\65\0\u052d\0\u0562\0\65\0\u0597\0\324\0\u05cc" +
      "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\65\0\u073f" +
      "\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7" +
      "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f" +
      "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37" +
      "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf" +
      "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\65" +
      "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa" +
      "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2" +
      "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a" +
      "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2" +
      "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a" +
      "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942" +
      "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea" +
      "\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92" +
      "\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a" +
      "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2" +
      "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a" +
      "\0\u21bf\0\u21f4\0\u06d5\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd" +
      "\0\u2332\0\u2367\0\u239c\0\u23d1\0\65\0\u2406\0\u243b\0\u2470" +
      "\0\u24a5\0\65\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u06d5" +
      "\0\65\0\u25e3\0\u06d5\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec" +
      "\0\u2721\0\u06d5\0\65\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a" +
      "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2" +
      "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u06d5\0\65" +
      "\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8" +
      "\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60" +
      "\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008" +
      "\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146\0\u06d5\0\65" +
      "\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u06d5\0\u3284\0\u32b9" +
      "\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461" +
      "\0\u3496\0\u34cb\0\u3500\0\u06d5\0\65\0\u3535\0\u356a\0\u359f" +
      "\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747" +
      "\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef" +
      "\0\u06d5\0\u3924\0\65\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d" +
      "\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5" +
      "\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d" +
      "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25" +
      "\0\u06d5\0\65\0\u06d5\0\65\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9" +
      "\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102\0\u4137\0\u416c\0\u41a1" +
      "\0\u41d6\0\u420b\0\u06d5\0\65\0\u4240\0\u06d5\0\65\0\u4275" +
      "\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\65\0\u43e8" +
      "\0\u441d\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b\0\u4590" +
      "\0\u45c5\0\u45fa\0\65\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703" +
      "\0\u4738\0\u476d\0\u47a2\0\u47d7\0\u06d5\0\65\0\u480c\0\u4841" +
      "\0\u4876\0\u48ab\0\u48e0\0\65\0\u4915\0\65\0\u494a\0\65" +
      "\0\u497f\0\u49b4\0\u49e9\0\u4a1e\0\u4a53\0\u4a88\0\u4abd\0\u4af2" +
      "\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30\0\u4c65\0\u4c9a" +
      "\0\u4ccf\0\u4d04\0\u4d39\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42" +
      "\0\65\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u4f80\0\u4fb5" +
      "\0\u06d5\0\65\0\u4fea\0\u501f\0\u5054\0\u5089\0\u50be\0\u50f3" +
      "\0\u5128\0\u515d\0\u5192\0\u51c7\0\u51fc\0\u5231\0\u5266\0\u529b" +
      "\0\u52d0\0\u5305\0\u533a\0\u536f\0\u53a4\0\u53d9\0\u540e\0\u5443" +
      "\0\u5478\0\u54ad\0\u54e2\0\u5517\0\65\0\u554c\0\u5581\0\u55b6" +
      "\0\u55eb\0\u5620\0\u5655\0\u568a\0\u56bf\0\u56f4\0\u5729\0\u575e" +
      "\0\65\0\u5793\0\u57c8\0\u57fd\0\u5832\0\u5867\0\u589c\0\65" +
      "\0\u58d1\0\u5906\0\u593b\0\u5970\0\u59a5\0\u59da\0\u5a0f\0\65" +
      "\0\u5a44\0\u5a79\0\u5aae\0\65\0\u5ae3\0\u5b18\0\u5b4d\0\u5b82" +
      "\0\u5bb7\0\65\0\u5bec\0\u5c21\0\u5c56\0\u5c8b\0\u5cc0\0\u5cf5" +
      "\0\65\0\u5d2a\0\u5d5f\0\u5d94\0\u5dc9\0\u5dfe\0\u5e33\0\u5e68" +
      "\0\u5e9d\0\u5ed2\0\65\0\u5f07\0\u5f3c\0\u5f71\0\u5fa6\0\u5fdb" +
      "\0\u6010\0\u6045\0\u607a\0\u60af\0\u60e4\0\65\0\65\0\u6119" +
      "\0\u614e\0\u6183\0\u61b8\0\65\0\u61ed\0\u6222\0\u6257\0\u628c" +
      "\0\65\0\u62c1\0\u62f6\0\u632b\0\u6360\0\65\0\u6395\0\u63ca" +
      "\0\u63ff\0\u6434\0\u6469\0\u649e\0\u64d3\0\65\0\u6508\0\65" +
      "\0\u653d\0\u6572\0\65\0\u65a7\0\65\0\u65dc\0\u6611\0\u6646" +
      "\0\u667b\0\u66b0\0\u66e5\0\65\0\u671a\0\u674f\0\u6784\0\u67b9" +
      "\0\u67ee\0\u6823\0\u6858\0\u688d\0\65\0\u68c2\0\65\0\u68f7" +
      "\0\u692c\0\u6961\0\65\0\u6996\0\u69cb\0\u6a00\0\u6a35\0\u6a6a" +
      "\0\65\0\u6a9f\0\u6ad4\0\65\0\65";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[589];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10" +
      "\1\11\1\7\3\12\1\13\1\14\1\2\1\15\1\16" +
      "\1\17\1\20\1\21\1\22\1\23\1\24\2\20\1\25" +
      "\2\20\1\26\1\27\1\30\1\31\1\32\1\33\1\20" +
      "\1\34\1\35\1\36\3\20\1\37\1\40\1\7\1\41" +
      "\1\2\1\42\1\43\1\44\2\2\106\0\1\45\57\0" +
      "\1\46\57\0\1\47\2\0\1\47\3\50\5\0\30\50" +
      "\2\0\1\47\34\0\1\51\12\0\1\52\30\0\1\53" +
      "\6\0\3\54\5\0\30\55\6\0\1\56\10\0\1\57" +
      "\130\0\1\60\17\0\1\53\6\0\3\55\5\0\6\55" +
      "\1\61\11\55\1\62\7\55\6\0\1\56\7\0\1\53" +
      "\6\0\3\55\5\0\30\55\6\0\1\56\7\0\1\53" +
      "\6\0\3\55\5\0\1\63\6\55\1\64\3\55\1\65" +
      "\2\55\1\66\11\55\6\0\1\56\7\0\1\53\6\0" +
      "\3\55\5\0\1\67\27\55\6\0\1\56\7\0\1\53" +
      "\6\0\3\55\5\0\13\55\1\70\14\55\6\0\1\56" +
      "\7\0\1\53\6\0\3\55\5\0\4\55\1\71\3\55" +
      "\1\72\17\55\6\0\1\56\1\73\6\0\1\53\6\0" +
      "\3\55\5\0\3\55\1\74\11\55\1\75\12\55\6\0" +
      "\1\56\7\0\1\53\6\0\3\55\5\0\16\55\1\76" +
      "\11\55\6\0\1\56\7\0\1\53\6\0\3\55\5\0" +
      "\16\55\1\77\11\55\6\0\1\56\7\0\1\53\6\0" +
      "\3\55\5\0\16\55\1\100\4\55\1\101\4\55\6\0" +
      "\1\56\7\0\1\53\6\0\3\55\5\0\17\55\1\102" +
      "\10\55\6\0\1\56\7\0\1\53\6\0\3\55\5\0" +
      "\1\103\27\55\6\0\1\56\7\0\1\53\6\0\3\55" +
      "\5\0\1\104\3\55\1\105\23\55\6\0\1\56\7\0" +
      "\1\53\6\0\3\55\5\0\4\55\1\106\3\55\1\107" +
      "\7\55\1\110\7\55\6\0\1\56\1\111\6\0\1\53" +
      "\6\0\3\55\5\0\21\55\1\112\6\55\6\0\1\56" +
      "\1\0\1\113\5\0\1\53\6\0\3\55\5\0\4\55" +
      "\1\114\23\55\6\0\1\56\7\0\1\115\6\0\3\56" +
      "\5\0\30\56\6\0\1\56\31\0\1\116\11\0\1\117" +
      "\24\0\2\120\2\0\61\120\7\0\1\121\3\0\3\50" +
      "\5\0\30\50\2\0\1\121\32\0\1\122\102\0\1\123" +
      "\27\0\1\53\6\0\3\124\5\0\30\124\6\0\1\125" +
      "\7\0\1\126\6\0\3\127\4\0\1\130\30\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\30\55\4\0\1\115\1\0\1\56\7\0\1\131" +
      "\6\0\3\56\4\0\1\130\30\56\4\0\1\115\1\0" +
      "\1\56\47\0\1\132\16\0\1\132\5\0\1\126\6\0" +
      "\3\55\4\0\1\130\20\55\1\133\7\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\4\55\1\134\23\55\4\0\1\115\1\0\1\56\7\0" +
      "\1\126\6\0\3\55\4\0\1\130\14\55\1\135\13\55" +
      "\4\0\1\115\1\0\1\56\7\0\1\126\6\0\3\55" +
      "\4\0\1\130\4\55\1\136\23\55\4\0\1\115\1\0" +
      "\1\56\7\0\1\126\6\0\3\55\4\0\1\130\1\137" +
      "\27\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\13\55\1\140\1\141\13\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\22\55\1\142\5\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\10\55\1\143" +
      "\17\55\4\0\1\115\1\0\1\56\1\144\6\0\1\126" +
      "\6\0\3\55\4\0\1\130\2\55\1\145\25\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\2\55\1\146\10\55\1\147\1\55\1\150\12\55" +
      "\4\0\1\115\1\0\1\56\30\0\1\151\10\0\1\152" +
      "\1\0\1\153\30\0\1\126\6\0\3\55\4\0\1\130" +
      "\30\55\2\0\1\154\1\0\1\115\1\0\1\56\7\0" +
      "\1\126\6\0\3\55\4\0\1\130\3\55\1\155\15\55" +
      "\1\156\6\55\4\0\1\115\1\0\1\56\1\0\1\157" +
      "\5\0\1\126\6\0\3\55\4\0\1\130\6\55\1\160" +
      "\21\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\3\55\1\161\24\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\14\55\1\162\13\55\4\0\1\115\1\0\1\56\7\0" +
      "\1\126\6\0\3\55\4\0\1\130\4\55\1\163\23\55" +
      "\4\0\1\115\1\0\1\56\7\0\1\126\6\0\3\55" +
      "\4\0\1\130\2\55\1\164\25\55\4\0\1\115\1\0" +
      "\1\56\7\0\1\126\6\0\3\55\4\0\1\130\20\55" +
      "\1\165\1\166\6\55\4\0\1\115\1\0\1\56\1\0" +
      "\1\167\5\0\1\126\6\0\3\55\4\0\1\130\3\55" +
      "\1\170\24\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\1\171\20\55\1\172\6\55" +
      "\4\0\1\115\1\0\1\56\1\0\1\173\5\0\1\126" +
      "\6\0\3\55\4\0\1\130\14\55\1\174\11\55\1\175" +
      "\1\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\4\55\1\176\23\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\10\55\1\177\17\55\4\0\1\115\1\0\1\56\1\200" +
      "\31\0\1\201\41\0\1\126\6\0\3\55\4\0\1\130" +
      "\23\55\1\202\4\55\4\0\1\115\1\0\1\56\51\0" +
      "\1\203\22\0\1\126\6\0\3\55\4\0\1\130\20\55" +
      "\1\204\7\55\4\0\1\115\1\0\1\56\7\0\1\115" +
      "\6\0\3\125\5\0\30\125\6\0\1\125\60\0\1\154" +
      "\35\0\1\205\15\0\1\157\16\0\1\157\14\0\1\206" +
      "\60\0\1\121\3\0\3\207\5\0\30\207\2\0\1\121" +
      "\53\0\1\210\16\0\1\210\46\0\1\211\23\0\1\212" +
      "\6\0\3\55\4\0\1\130\30\55\4\0\1\115\1\0" +
      "\1\56\7\0\1\212\6\0\3\56\4\0\1\130\30\56" +
      "\4\0\1\115\1\0\1\56\7\0\1\126\6\0\3\124" +
      "\5\0\30\124\4\0\1\115\1\0\1\125\7\0\1\126" +
      "\6\0\3\213\4\0\1\130\30\55\4\0\1\115\1\0" +
      "\1\56\7\0\1\131\6\0\3\125\5\0\30\125\4\0" +
      "\1\115\1\0\1\125\44\0\1\214\27\0\1\126\6\0" +
      "\3\55\4\0\1\130\4\55\1\215\23\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\1\216\27\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\17\55\1\217\10\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\2\55\1\220\25\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\21\55\1\221" +
      "\6\55\4\0\1\115\1\0\1\56\1\0\1\222\5\0" +
      "\1\126\6\0\3\55\4\0\1\130\23\55\1\223\4\55" +
      "\4\0\1\115\1\0\1\56\7\0\1\126\6\0\3\55" +
      "\4\0\1\130\1\55\1\224\26\55\4\0\1\115\1\0" +
      "\1\56\7\0\1\126\6\0\3\55\4\0\1\130\16\55" +
      "\1\225\11\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\14\55\1\226\13\55\4\0" +
      "\1\115\1\0\1\56\42\0\1\227\31\0\1\126\6\0" +
      "\3\55\4\0\1\130\7\55\1\230\20\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\7\55\1\231\20\55\4\0\1\115\1\0\1\56\7\0" +
      "\1\126\6\0\3\55\4\0\1\130\1\232\27\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\30\55\2\0\1\233\1\0\1\115\1\0\1\56" +
      "\35\0\1\234\55\0\1\235\116\0\1\233\54\0\1\236" +
      "\23\0\1\126\6\0\3\55\4\0\1\130\10\55\1\237" +
      "\17\55\4\0\1\115\1\0\1\56\1\240\6\0\1\126" +
      "\6\0\3\55\4\0\1\130\22\55\1\241\5\55\4\0" +
      "\1\115\1\0\1\56\50\0\1\242\23\0\1\126\6\0" +
      "\3\55\4\0\1\130\10\55\1\243\17\55\4\0\1\115" +
      "\1\0\1\56\1\244\6\0\1\126\6\0\3\55\4\0" +
      "\1\130\10\55\1\245\17\55\4\0\1\115\1\0\1\56" +
      "\1\246\6\0\1\126\6\0\3\55\4\0\1\130\1\55" +
      "\1\247\26\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\24\55\1\250\3\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\10\55\1\251\17\55\4\0\1\115\1\0\1\56" +
      "\1\252\6\0\1\126\6\0\3\55\4\0\1\130\1\253" +
      "\27\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\21\55\1\254\6\55\4\0\1\115" +
      "\1\0\1\56\1\0\1\255\45\0\1\255\16\0\1\255" +
      "\5\0\1\126\6\0\3\55\4\0\1\130\10\55\1\256" +
      "\17\55\4\0\1\115\1\0\1\56\1\257\6\0\1\126" +
      "\6\0\3\55\4\0\1\130\13\55\1\260\14\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\17\55\1\261\10\55\4\0\1\115\1\0\1\56" +
      "\45\0\1\262\26\0\1\126\6\0\3\55\4\0\1\130" +
      "\1\263\27\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\22\55\1\264\5\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\14\55\1\265\13\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\24\55\1\266" +
      "\3\55\4\0\1\115\1\0\1\56\52\0\1\267\54\0" +
      "\1\270\31\0\1\126\6\0\3\55\4\0\1\130\1\271" +
      "\27\55\4\0\1\115\1\0\1\56\26\0\1\272\45\0" +
      "\1\126\6\0\3\55\4\0\1\130\21\55\1\273\6\55" +
      "\4\0\1\115\1\0\1\56\1\0\1\274\34\0\1\240" +
      "\26\0\1\240\10\0\1\275\71\0\3\207\5\0\30\207" +
      "\41\0\1\276\62\0\1\277\43\0\1\212\52\0\1\115" +
      "\11\0\1\126\5\0\1\300\3\301\4\0\1\130\30\55" +
      "\4\0\1\115\1\0\1\56\43\0\1\302\30\0\1\126" +
      "\6\0\3\55\4\0\1\130\6\55\1\303\21\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\30\55\2\0\1\304\1\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\16\55\1\305" +
      "\11\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\12\55\1\306\15\55\4\0\1\115" +
      "\1\0\1\56\2\0\1\307\4\0\1\126\6\0\3\55" +
      "\4\0\1\130\4\55\1\310\23\55\4\0\1\115\1\0" +
      "\1\56\32\0\1\311\41\0\1\126\6\0\3\55\4\0" +
      "\1\130\14\55\1\312\13\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\16\55\1\313" +
      "\11\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\21\55\1\314\6\55\4\0\1\115" +
      "\1\0\1\56\1\0\1\315\5\0\1\126\6\0\3\55" +
      "\4\0\1\130\10\55\1\316\17\55\4\0\1\115\1\0" +
      "\1\56\1\317\35\0\1\317\26\0\1\317\6\0\1\126" +
      "\6\0\3\55\4\0\1\130\1\320\27\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\4\55\1\321\23\55\4\0\1\115\1\0\1\56\7\0" +
      "\1\126\6\0\3\55\4\0\1\130\21\55\1\322\6\55" +
      "\4\0\1\115\1\0\1\56\1\0\1\323\45\0\1\324" +
      "\16\0\1\324\30\0\1\325\101\0\1\323\16\0\1\323" +
      "\44\0\1\326\25\0\1\126\6\0\3\55\4\0\1\130" +
      "\2\55\1\327\25\55\4\0\1\115\1\0\1\56\30\0" +
      "\1\330\43\0\1\126\6\0\3\55\4\0\1\130\10\55" +
      "\1\331\17\55\4\0\1\115\1\0\1\56\1\332\35\0" +
      "\1\332\26\0\1\332\6\0\1\126\6\0\3\55\4\0" +
      "\1\130\15\55\1\333\12\55\4\0\1\115\1\0\1\56" +
      "\43\0\1\334\30\0\1\126\6\0\3\55\4\0\1\130" +
      "\5\55\1\335\22\55\4\0\1\115\1\0\1\56\33\0" +
      "\1\336\40\0\1\126\6\0\3\55\4\0\1\130\20\55" +
      "\1\337\7\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\1\340\15\55\1\341\11\55" +
      "\4\0\1\115\1\0\1\56\7\0\1\126\6\0\3\55" +
      "\4\0\1\130\16\55\1\342\11\55\4\0\1\115\1\0" +
      "\1\56\44\0\1\343\27\0\1\126\6\0\3\55\4\0" +
      "\1\130\14\55\1\344\13\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\25\55\1\345" +
      "\2\55\4\0\1\115\1\0\1\56\53\0\1\346\20\0" +
      "\1\126\6\0\3\55\4\0\1\130\16\55\1\347\11\55" +
      "\4\0\1\115\1\0\1\56\44\0\1\350\27\0\1\126" +
      "\6\0\3\55\4\0\1\130\10\55\1\351\17\55\4\0" +
      "\1\115\1\0\1\56\1\352\6\0\1\126\6\0\3\55" +
      "\4\0\1\130\23\55\1\353\4\55\4\0\1\115\1\0" +
      "\1\56\51\0\1\354\22\0\1\126\6\0\3\55\4\0" +
      "\1\130\16\55\1\355\11\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\17\55\1\356" +
      "\10\55\4\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\10\55\1\357\17\55\4\0\1\115" +
      "\1\0\1\56\1\360\35\0\1\360\26\0\1\360\44\0" +
      "\1\361\26\0\1\126\6\0\3\55\4\0\1\130\20\55" +
      "\1\362\7\55\4\0\1\115\1\0\1\56\46\0\1\363" +
      "\25\0\1\126\6\0\3\55\4\0\1\130\10\55\1\364" +
      "\17\55\4\0\1\115\1\0\1\56\1\365\35\0\1\365" +
      "\26\0\1\365\40\0\1\366\51\0\1\367\54\0\3\370" +
      "\53\0\1\126\6\0\3\301\4\0\1\130\30\55\4\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\1\371\27\55\4\0\1\115\1\0\1\56\50\0" +
      "\1\372\23\0\1\126\6\0\3\55\4\0\1\130\30\55" +
      "\2\0\1\373\1\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\1\55\1\374\26\55\4\0" +
      "\1\115\1\0\1\56\27\0\1\375\44\0\1\126\6\0" +
      "\3\55\4\0\1\130\15\55\1\376\12\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\30\55\2\0\1\377\1\0\1\115\1\0\1\56\60\0" +
      "\1\377\13\0\1\126\6\0\3\55\4\0\1\130\15\55" +
      "\1\u0100\12\55\4\0\1\115\1\0\1\56\43\0\1\u0101" +
      "\30\0\1\126\6\0\3\55\4\0\1\130\30\55\2\0" +
      "\1\u0102\1\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\20\55\1\u0103\7\55\4\0\1\115" +
      "\1\0\1\56\44\0\1\u0104\66\0\1\u0105\54\0\1\u0106" +
      "\26\0\1\u0106\6\0\1\126\6\0\3\55\4\0\1\130" +
      "\4\55\1\u0107\23\55\4\0\1\115\1\0\1\56\32\0" +
      "\1\u0108\41\0\1\126\6\0\3\55\4\0\1\130\22\55" +
      "\1\u0109\5\55\4\0\1\115\1\0\1\56\50\0\1\u010a" +
      "\23\0\1\126\6\0\3\55\4\0\1\130\30\55\2\0" +
      "\1\u010b\1\0\1\115\1\0\1\56\60\0\1\u010b\13\0" +
      "\1\126\6\0\3\55\4\0\1\130\10\55\1\u010c\17\55" +
      "\4\0\1\115\1\0\1\56\1\u010d\35\0\1\u010d\26\0" +
      "\1\u010d\6\0\1\126\6\0\3\55\4\0\1\130\4\55" +
      "\1\u010e\23\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\30\55\2\0\1\u010f\1\0" +
      "\1\115\1\0\1\56\7\0\1\126\6\0\3\55\4\0" +
      "\1\130\30\55\2\0\1\u0110\1\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\15\55\1\u0111" +
      "\12\55\4\0\1\115\1\0\1\56\43\0\1\u0112\30\0" +
      "\1\126\6\0\3\55\4\0\1\130\4\55\1\u0113\23\55" +
      "\4\0\1\115\1\0\1\56\7\0\1\126\6\0\3\55" +
      "\4\0\1\130\16\55\1\u0114\11\55\4\0\1\115\1\0" +
      "\1\56\44\0\1\u0115\27\0\1\126\6\0\3\55\4\0" +
      "\1\130\27\55\1\u0116\4\0\1\115\1\0\1\56\55\0" +
      "\1\u0117\16\0\1\126\6\0\3\55\4\0\1\130\4\55" +
      "\1\u0118\23\55\4\0\1\115\1\0\1\56\32\0\1\u0119" +
      "\41\0\1\126\6\0\3\55\4\0\1\130\30\55\2\0" +
      "\1\u011a\1\0\1\115\1\0\1\56\7\0\1\126\6\0" +
      "\3\55\4\0\1\130\16\55\1\u011b\11\55\4\0\1\115" +
      "\1\0\1\56\7\0\1\126\6\0\3\55\4\0\1\130" +
      "\1\u011c\27\55\4\0\1\115\1\0\1\56\26\0\1\u011d" +
      "\102\0\1\u011e\27\0\1\126\6\0\3\55\4\0\1\130" +
      "\10\55\1\u011f\17\55\4\0\1\115\1\0\1\56\1\u0120" +
      "\35\0\1\u0120\26\0\1\u0120\6\0\1\126\6\0\3\55" +
      "\4\0\1\130\16\55\1\u0121\11\55\4\0\1\115\1\0" +
      "\1\56\44\0\1\u0122\52\0\1\u0123\101\0\1\u0124\16\0" +
      "\1\u0124\14\0\3\u0125\53\0\1\126\6\0\3\55\4\0" +
      "\1\130\20\55\1\u0126\7\55\4\0\1\115\1\0\1\56" +
      "\32\0\1\u0127\102\0\1\u0128\23\0\1\126\6\0\3\55" +
      "\4\0\1\130\16\55\1\u0129\11\55\4\0\1\115\1\0" +
      "\1\56\44\0\1\u012a\27\0\1\126\6\0\3\55\4\0" +
      "\1\130\1\u012b\27\55\4\0\1\115\1\0\1\56\51\0" +
      "\1\u012c\22\0\1\126\6\0\3\55\4\0\1\130\1\u012d" +
      "\27\55\4\0\1\115\1\0\1\56\26\0\1\u012e\66\0" +
      "\1\u012f\11\0\1\u0130\31\0\1\126\6\0\3\55\4\0" +
      "\1\130\16\55\1\u0131\11\55\4\0\1\115\1\0\1\56" +
      "\41\0\1\u0132\67\0\1\u0133\72\0\1\u0134\21\0\1\126" +
      "\6\0\3\55\4\0\1\130\23\55\1\u0135\4\55\4\0" +
      "\1\115\1\0\1\56\51\0\1\u0136\64\0\1\u0137\22\0" +
      "\1\126\6\0\3\55\4\0\1\130\2\55\1\u0138\25\55" +
      "\4\0\1\115\1\0\1\56\30\0\1\u0139\104\0\1\u013a" +
      "\61\0\1\u013b\26\0\1\126\6\0\3\55\4\0\1\130" +
      "\4\55\1\u013c\23\55\4\0\1\115\1\0\1\56\32\0" +
      "\1\u013d\41\0\1\126\6\0\3\55\4\0\1\130\22\55" +
      "\1\u013e\5\55\4\0\1\115\1\0\1\56\7\0\1\126" +
      "\6\0\3\55\4\0\1\130\20\55\1\u013f\7\55\4\0" +
      "\1\115\1\0\1\56\46\0\1\u0140\25\0\1\126\6\0" +
      "\3\55\4\0\1\130\1\u0141\27\55\4\0\1\115\1\0" +
      "\1\56\26\0\1\u0142\45\0\1\126\6\0\3\55\4\0" +
      "\1\130\21\55\1\u0143\6\55\4\0\1\115\1\0\1\56" +
      "\1\0\1\u0144\45\0\1\u0144\16\0\1\u0144\50\0\1\u0145" +
      "\21\0\1\126\6\0\3\55\4\0\1\130\30\55\2\0" +
      "\1\u0146\1\0\1\115\1\0\1\56\60\0\1\u0146\13\0" +
      "\1\126\6\0\3\55\4\0\1\130\16\55\1\u0147\11\55" +
      "\4\0\1\115\1\0\1\56\44\0\1\u0148\27\0\1\126" +
      "\6\0\3\55\4\0\1\130\15\55\1\u0149\12\55\4\0" +
      "\1\115\1\0\1\56\43\0\1\u014a\70\0\1\u014b\16\0" +
      "\1\u014b\30\0\1\u014c\47\0\1\u014d\56\0\1\126\6\0" +
      "\3\55\4\0\1\130\30\55\2\0\1\u014e\1\0\1\115" +
      "\1\0\1\56\54\0\1\u014f\42\0\1\u0150\41\0\1\126" +
      "\6\0\3\55\4\0\1\130\26\55\1\u0151\1\55\4\0" +
      "\1\115\1\0\1\56\54\0\1\u0152\17\0\1\126\6\0" +
      "\3\55\4\0\1\130\21\55\1\u0153\6\55\4\0\1\115" +
      "\1\0\1\56\1\0\1\u0154\45\0\1\u0155\16\0\1\u0155" +
      "\5\0\1\126\6\0\3\55\4\0\1\130\20\55\1\u0156" +
      "\7\55\4\0\1\115\1\0\1\56\46\0\1\u0157\64\0" +
      "\1\u0158\62\0\1\u0159\56\0\1\u015a\26\0\1\u015a\35\0" +
      "\1\u015b\26\0\1\u015b\6\0\1\126\6\0\3\55\4\0" +
      "\1\130\2\55\1\u015c\25\55\4\0\1\115\1\0\1\56" +
      "\30\0\1\u015d\103\0\1\u015e\16\0\1\u015e\5\0\1\126" +
      "\6\0\3\55\4\0\1\130\1\u015f\27\55\4\0\1\115" +
      "\1\0\1\56\26\0\1\u0160\104\0\1\u0161\44\0\1\u0162" +
      "\45\0\1\126\6\0\3\55\4\0\1\130\21\55\1\u0163" +
      "\6\55\4\0\1\115\1\0\1\56\1\0\1\u0164\45\0" +
      "\1\u0164\16\0\1\u0164\5\0\1\126\6\0\3\55\4\0" +
      "\1\130\20\55\1\u0165\7\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\3\55\1\u0166" +
      "\24\55\4\0\1\115\1\0\1\56\31\0\1\u0167\42\0" +
      "\1\126\6\0\3\55\4\0\1\130\20\55\1\u0168\7\55" +
      "\4\0\1\115\1\0\1\56\46\0\1\u0169\25\0\1\126" +
      "\6\0\3\55\4\0\1\130\22\55\1\u016a\5\55\4\0" +
      "\1\115\1\0\1\56\50\0\1\u016b\52\0\1\u016c\26\0" +
      "\1\u016c\44\0\1\u016d\26\0\1\126\6\0\3\55\4\0" +
      "\1\130\30\55\2\0\1\u016e\1\0\1\115\1\0\1\56" +
      "\60\0\1\u016e\13\0\1\126\6\0\3\55\2\0\1\u016f" +
      "\1\0\1\130\30\55\4\0\1\115\1\0\1\56\23\0" +
      "\1\u016f\110\0\1\u0170\16\0\1\u0170\37\0\1\u0171\41\0" +
      "\3\u0172\74\0\1\u0173\104\0\1\u0174\70\0\1\u0175\61\0" +
      "\1\u0176\22\0\1\126\6\0\3\55\4\0\1\130\30\55" +
      "\2\0\1\u0177\1\0\1\115\1\0\1\56\60\0\1\u0177" +
      "\36\0\1\u0178\63\0\1\u0179\63\0\1\u017a\62\0\1\u017b" +
      "\45\0\1\126\6\0\3\55\4\0\1\130\10\55\1\u017c" +
      "\17\55\4\0\1\115\1\0\1\56\1\u017d\35\0\1\u017d" +
      "\26\0\1\u017d\50\0\1\u017e\22\0\1\126\6\0\3\55" +
      "\4\0\1\130\20\55\1\u017f\7\55\4\0\1\115\1\0" +
      "\1\56\46\0\1\u0180\54\0\1\u0181\26\0\1\u0181\46\0" +
      "\1\u0182\16\0\1\u0182\5\0\1\126\6\0\3\55\4\0" +
      "\1\130\16\55\1\u0183\11\55\4\0\1\115\1\0\1\56" +
      "\7\0\1\126\6\0\3\55\4\0\1\130\30\55\2\0" +
      "\1\u0184\1\0\1\115\1\0\1\56\60\0\1\u0184\13\0" +
      "\1\126\6\0\3\55\4\0\1\130\1\u0185\27\55\4\0" +
      "\1\115\1\0\1\56\26\0\1\u0186\105\0\1\u0187\16\0" +
      "\1\u0187\44\0\1\u0188\44\0\1\u0189\1\0\1\u018a\12\0" +
      "\1\u018b\44\0\1\u018c\73\0\1\u018d\50\0\3\u018e\110\0" +
      "\1\u018f\64\0\1\u0190\70\0\1\u0191\42\0\1\u0192\66\0" +
      "\1\u0193\17\0\1\u0194\1\u0195\41\0\1\u0196\74\0\1\u0197" +
      "\26\0\1\u0197\35\0\1\u0198\26\0\1\u0198\6\0\1\126" +
      "\6\0\3\55\4\0\1\130\16\55\1\u0199\11\55\4\0" +
      "\1\115\1\0\1\56\44\0\1\u019a\46\0\1\u019b\45\0" +
      "\1\126\6\0\3\55\4\0\1\130\30\55\2\0\1\u019c" +
      "\1\0\1\115\1\0\1\56\60\0\1\u019c\56\0\1\u019d" +
      "\61\0\1\u019e\16\0\1\u019e\5\0\1\126\6\0\3\55" +
      "\4\0\1\130\21\55\1\u019f\6\55\4\0\1\115\1\0" +
      "\1\56\1\0\1\u01a0\45\0\1\u01a1\16\0\1\u01a1\34\0" +
      "\1\u01a2\26\0\1\u01a2\31\0\1\u01a3\75\0\1\u01a4\67\0" +
      "\1\u01a5\67\0\1\u01a6\62\0\1\u01a7\16\0\1\u01a7\40\0" +
      "\1\u01a8\66\0\1\u01a9\66\0\1\u01aa\62\0\1\u01ab\66\0" +
      "\1\u01ac\65\0\1\u01ad\16\0\1\u01ad\26\0\1\u01ae\67\0" +
      "\1\u01af\101\0\1\u01b0\23\0\1\126\6\0\3\55\4\0" +
      "\1\130\15\55\1\u01b1\12\55\4\0\1\115\1\0\1\56" +
      "\43\0\1\u01b2\67\0\1\u01b3\46\0\1\u01b4\17\0\1\u01b5" +
      "\1\u01b6\51\0\1\u01b7\26\0\1\u01b7\52\0\1\u01b8\20\0" +
      "\1\126\6\0\3\55\4\0\1\130\30\55\2\0\1\u01b9" +
      "\1\0\1\115\1\0\1\56\60\0\1\u01b9\50\0\1\u01ba" +
      "\47\0\1\u01bb\71\0\1\u01bc\100\0\1\u01bd\46\0\1\u01be" +
      "\64\0\1\u01bf\101\0\1\u01c0\16\0\1\u01c0\43\0\1\u01c1" +
      "\55\0\1\u01c2\26\0\1\u01c2\41\0\1\u01c3\60\0\1\u01c4" +
      "\26\0\1\u01c4\50\0\1\u01c5\51\0\1\u01c6\26\0\1\u01c6" +
      "\35\0\1\u01c7\26\0\1\u01c7\50\0\1\u01c8\51\0\1\u01c9" +
      "\26\0\1\u01c9\43\0\1\u01ca\66\0\1\u01cb\65\0\1\u01cc" +
      "\16\0\1\u01cc\24\0\1\u01cd\102\0\1\u01ce\50\0\1\u01cf" +
      "\17\0\1\u01d0\55\0\1\u01d1\64\0\1\u01d2\74\0\1\u01d3" +
      "\51\0\1\u01d4\26\0\1\u01d4\25\0\1\u01d5\110\0\1\u01d6" +
      "\63\0\1\u01d7\57\0\1\u01d8\64\0\1\u01d9\65\0\1\u01da" +
      "\71\0\1\u01db\40\0\1\u01dc\102\0\1\u01dd\50\0\1\u01de" +
      "\65\0\1\u01df\77\0\1\u01e0\62\0\1\u01e1\60\0\1\u01e2" +
      "\26\0\1\u01e2\50\0\1\u01e3\61\0\1\u01e4\62\0\1\u01e5" +
      "\66\0\1\u01e6\54\0\1\u01e7\26\0\1\u01e7\31\0\1\u01e8" +
      "\75\0\1\u01e9\55\0\1\u01ea\60\0\1\u01eb\100\0\1\u01ec" +
      "\67\0\1\u01ed\16\0\1\u01ed\41\0\1\u01ee\65\0\1\u01ef" +
      "\56\0\1\u01f0\26\0\1\u01f0\45\0\1\u01f1\61\0\1\u01f2" +
      "\47\0\1\u01f3\70\0\1\u01f4\25\0\1\u01f5\51\0\1\u01f6" +
      "\71\0\1\u01f7\40\0\1\u01f8\67\0\1\u01f9\75\0\1\u01fa" +
      "\60\0\1\u01fb\26\0\1\u01fb\27\0\1\u01fc\104\0\1\u01fd" +
      "\65\0\1\u01fe\51\0\1\u01ff\26\0\1\u01ff\50\0\1\u0200" +
      "\45\0\1\u0201\75\0\1\u0202\47\0\1\u0203\74\0\1\u0204" +
      "\26\0\1\u0204\27\0\1\u0205\103\0\1\u0206\16\0\1\u0206" +
      "\44\0\1\u0207\62\0\1\u0208\56\0\1\u0209\26\0\1\u0209" +
      "\45\0\1\u020a\63\0\1\u020b\71\0\1\u020c\50\0\1\u020d" +
      "\26\0\1\u020d\25\0\1\u020e\102\0\1\u020f\64\0\1\u0210" +
      "\46\0\1\u0211\101\0\1\u0212\53\0\1\u0213\76\0\1\u0214" +
      "\56\0\1\u0215\26\0\1\u0215\57\0\1\u0216\36\0\1\u0217" +
      "\75\0\1\u0218\47\0\1\u0219\74\0\1\u021a\26\0\1\u021a" +
      "\43\0\1\u021b\56\0\1\u021c\26\0\1\u021c\47\0\1\u021d" +
      "\57\0\1\u021e\67\0\1\u021f\66\0\1\u0220\57\0\1\u0221" +
      "\65\0\1\u0222\66\0\1\u0223\44\0\1\u0224\70\0\1\u0225" +
      "\76\0\1\u0226\63\0\1\u0227\47\0\1\u0228\107\0\1\u0229" +
      "\51\0\1\u022a\26\0\1\u022a\31\0\1\u022b\102\0\1\u022c" +
      "\57\0\1\u022d\53\0\1\u022e\73\0\1\u022f\66\0\1\u0230" +
      "\53\0\1\u0231\63\0\1\u0232\77\0\1\u0233\52\0\1\u0234" +
      "\60\0\1\u0235\74\0\1\u0236\26\0\1\u0236\47\0\1\u0237" +
      "\57\0\1\u0238\53\0\1\u0239\112\0\1\u023a\45\0\1\u023b" +
      "\100\0\1\u023c\41\0\1\u023d\102\0\1\u023e\63\0\1\u023f" +
      "\16\0\1\u023f\41\0\1\u0240\57\0\1\u0241\26\0\1\u0241" +
      "\25\0\1\u0242\70\0\1\u0243\103\0\1\u0244\70\0\1\u0245" +
      "\40\0\1\u0246\65\0\1\u0247\60\0\1\u0248\64\0\1\u0249" +
      "\110\0\1\u024a\43\0\1\u024b\77\0\1\u024c\46\0\1\u024d" +
      "\41\0";

  private static int[] zzUnpacktrans() {
    int[] result = new int[27401];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
      "Unknown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\3\11\4\1\1\11\1\1\1\11\1\1\1\11" +
      "\21\1\4\11\2\1\1\11\2\0\1\1\3\0\3\1" +
      "\1\11\1\0\12\1\1\0\15\1\1\0\1\1\1\0" +
      "\1\1\1\0\1\1\2\0\1\1\2\0\2\1\1\0" +
      "\1\1\1\11\2\0\11\1\1\0\4\1\4\0\2\1" +
      "\1\0\7\1\1\0\3\1\1\0\4\1\2\0\1\1" +
      "\1\0\1\1\2\0\1\1\3\0\1\1\1\0\5\1" +
      "\1\0\4\1\1\0\3\1\4\0\1\1\1\0\1\1" +
      "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1" +
      "\1\0\1\1\1\0\2\1\1\0\4\1\2\0\1\1" +
      "\1\0\1\1\1\0\1\11\3\0\1\1\1\11\1\1" +
      "\1\0\2\1\1\0\1\1\1\11\3\1\1\0\1\1" +
      "\1\0\3\1\1\11\3\0\1\1\1\0\1\1\1\0" +
      "\1\1\1\0\1\1\1\0\4\1\1\0\2\1\1\0" +
      "\1\1\1\11\1\1\1\0\1\1\1\0\3\1\2\0" +
      "\1\1\1\0\1\1\4\0\1\1\2\0\1\1\1\0" +
      "\1\1\1\0\1\1\2\0\1\1\3\0\1\1\1\11" +
      "\1\1\2\0\1\1\1\0\1\1\2\0\1\1\1\0" +
      "\2\1\1\0\1\1\1\0\1\1\2\0\2\1\1\11" +
      "\1\0\1\1\1\0\1\1\4\0\1\1\2\0\1\1" +
      "\1\0\1\1\1\0\1\1\3\0\1\1\1\0\1\11" +
      "\1\0\1\1\2\0\1\1\3\0\1\1\1\0\2\1" +
      "\1\0\1\1\1\0\1\1\3\0\3\1\7\0\1\1" +
      "\1\11\1\1\1\11\1\0\1\1\5\0\1\1\2\0" +
      "\1\1\3\0\1\1\1\11\2\1\1\11\1\1\1\0" +
      "\1\1\4\0\1\11\13\0\1\11\1\1\2\0\1\1" +
      "\3\0\1\1\1\0\1\1\1\11\5\0\1\11\1\0" +
      "\1\11\1\0\1\11\10\0\1\1\5\0\1\1\11\0" +
      "\1\11\7\0\1\1\1\11\32\0\1\11\13\0\1\11" +
      "\6\0\1\11\7\0\1\11\3\0\1\11\5\0\1\11" +
      "\6\0\1\11\11\0\1\11\12\0\2\11\4\0\1\11" +
      "\4\0\1\11\4\0\1\11\7\0\1\11\1\0\1\11" +
      "\2\0\1\11\1\0\1\11\4\0\1\1\1\0\1\11" +
      "\10\0\1\11\1\0\1\11\3\0\1\11\5\0\1\11" +
      "\2\0\2\11";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[589];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the
   * {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * 
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond
   * {@link #zzEndRead}.
   *
   * <p>
   * When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will
   * have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /**
   * Number of characters from the last newline up to the start of the matched
   * text.
   */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  int longitudToken = 0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public LexerXson(java.io.Reader in) {
    yyline = 1;
    yychar = 1;

    this.zzReader = in;
  }

  /**
   * Returns the maximum size of the scanner buffer, which limits the size of
   * tokens.
   */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /** Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
          zzBuffer, 0,
          zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
      } else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else { // There is room in the buffer for at least one more char
          int c = zzReader.read(); // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char) c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }

  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>
   * Does not close the old reader.
   *
   * <p>
   * All internal variables are reset, the old input stream <b>cannot</b> be
   * reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
    zzAtBOL = true;
    zzAtEOF = false;
    zzCurrentPos = 0;
    zzMarkedPos = 0;
    zzStartRead = 0;
    zzEndRead = 0;
    zzFinalHighSurrogate = 0;
    yyline = 0;
    yycolumn = 0;
    yychar = 0L;
  }

  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }

  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>
   * It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to
   *                 {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }

  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occurred while scanning.
   *
   * <p>
   * In a well-formed scanner (no or only correct usage of {@code yypushback(int)}
   * and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>
   * If this method is called, something is seriously wrong (e.g. a JFlex bug
   * producing a faulty
   * scanner etc.).
   *
   * <p>
   * Usual syntax/scanner level error handling should be done in error fallback
   * rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>
   * They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not
   *               be greater than
   *               {@link #yylength()}.
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;

      yyclose();
    }
  }

  /**
   * Resumes scanning until the next regular expression is matched, the end of
   * input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        {
          return new java_cup.runtime.Symbol(symbol.EOF);
        }
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            longitudToken = yytext().length();
            yychar += longitudToken;

            ReporteError.agregarError(
                new Errorx("Lexico", yytext(), "Caracter no reconocido" + yytext(), yyline, (int) yychar));
          }
          // fall through
          case 71:
            break;
          case 2: {
            yychar = 1;
            yyline++;
          }
          // fall through
          case 72:
            break;
          case 3: {
            yychar += 1;
          }
          // fall through
          case 73:
            break;
          case 4: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.COMILLAS, yyline, (int) yychar, yytext());
          }
          // fall through
          case 74:
            break;
          case 5: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.COMA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 75:
            break;
          case 6: {
            longitudToken = yytext().length();
            yychar += longitudToken;
            System.out.println(" numero : " + yytext());
            return new Symbol(symbol.VALOR_NUMERO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 76:
            break;
          case 7: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.DOS_PUNTOS, yyline, (int) yychar, yytext());
          }
          // fall through
          case 77:
            break;
          case 8: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.INICIO_ETIQUETA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 78:
            break;
          case 9: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.FIN_ETIQUETA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 79:
            break;
          case 10: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.INTERROGACION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 80:
            break;
          case 11: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.CORCHETE_IZQ, yyline, (int) yychar, yytext());
          }
          // fall through
          case 81:
            break;
          case 12: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.CORCHETE_DER, yyline, (int) yychar, yytext());
          }
          // fall through
          case 82:
            break;
          case 13: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.LLAVE_IZQ, yyline, (int) yychar, yytext());
          }
          // fall through
          case 83:
            break;
          case 14: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.LLAVE_DER, yyline, (int) yychar, yytext());
          }
          // fall through
          case 84:
            break;
          case 15: {
            yychar += 2;
            System.out.println(yytext());
            return new Symbol(symbol.FIN_SOLICITUD, yyline, (int) yychar, yytext());
          }
          // fall through
          case 85:
            break;
          case 16: {
            longitudToken = yytext().length();
            yychar += longitudToken;
            System.out.println(" Ids : " + yytext());
            return new Symbol(symbol.IDS, yyline, (int) yychar, yytext());
          }
          // fall through
          case 86:
            break;
          case 17: {
            longitudToken = yytext().length();
            yychar += longitudToken;
            System.out.println(" valor de cadena : " + yytext());
            return new Symbol(symbol.VALOR_CADENA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 87:
            break;
          case 18: {
            longitudToken = yytext().length();
            yychar += longitudToken;
            System.out.println("opt " + yytext());
            return new Symbol(symbol.OPTIONS, yyline, (int) yychar, yytext());
          }
          // fall through
          case 88:
            break;
          case 19: {
            yychar += 2;
            System.out.println(yytext());
            return new Symbol(symbol.INICIO_SOLICITUD, yyline, (int) yychar, yytext());
          }
          // fall through
          case 89:
            break;
          case 20: {
            yychar += 2;
            System.out.println(yytext());
            return new Symbol(symbol.ID, yyline, (int) yychar, yytext());
          }
          // fall through
          case 90:
            break;
          case 21: {
            longitudToken = yytext().length();
            yychar += longitudToken;
            System.out.println("opt " + yytext());
            return new Symbol(symbol.PREGUNTA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 91:
            break;
          case 22: {
            yychar += 4;
            System.out.println(yytext());
            return new Symbol(symbol.TEMA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 92:
            break;
          case 23: {
            yychar += 3;
            System.out.println("version1: " + yytext());
            return new Symbol(symbol.VERSION1, yyline, (int) yychar, yytext());
          }
          // fall through
          case 93:
            break;
          case 24: {
            yychar += 4;
            System.out.println(yytext());
            return new Symbol(symbol.XSON, yyline, (int) yychar, yytext());
          }
          // fall through
          case 94:
            break;
          case 25: {
            yychar += 5;
            System.out.println(yytext());
            return new Symbol(symbol.CLASE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 95:
            break;
          case 26: {
            yychar += 5;
            System.out.println(yytext());
            return new Symbol(symbol.COMBO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 96:
            break;
          case 27: {
            yychar += 5;
            System.out.println(yytext());
            return new Symbol(symbol.FILAS, yyline, (int) yychar, yytext());
          }
          // fall through
          case 97:
            break;
          case 28: {
            yychar += 5;
            System.out.println(yytext());
            return new Symbol(symbol.RADIO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 98:
            break;
          case 29: {
            yychar += 6;
            System.out.println(yytext());
            return new Symbol(symbol.INDICE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 99:
            break;
          case 30: {
            yychar += 6;
            System.out.println(yytext());
            return new Symbol(symbol.NOMBRE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 100:
            break;
          case 31: {
            yychar += 6;
            System.out.println(yytext());
            return new Symbol(symbol.TRIVIA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 101:
            break;
          case 32: {
            yychar += 7;
            System.out.println(yytext());
            return new Symbol(symbol.FICHERO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 102:
            break;
          case 33: {
            yychar += 7;
            System.out.println(yytext());
            return new Symbol(symbol.USUARIO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 103:
            break;
          case 34: {
            yychar += 8;
            System.out.println(yytext());
            return new Symbol(symbol.CHECKBOX, yyline, (int) yychar, yytext());
          }
          // fall through
          case 104:
            break;
          case 35: {
            yychar += 8;
            System.out.println(yytext());
            return new Symbol(symbol.COLUMNAS, yyline, (int) yychar, yytext());
          }
          // fall through
          case 105:
            break;
          case 36: {
            yychar += 8;
            System.out.println(yytext());
            return new Symbol(symbol.OPCIONES, yyline, (int) yychar, yytext());
          }
          // fall through
          case 106:
            break;
          case 37: {
            yychar += 8;
            System.out.println(yytext());
            return new Symbol(symbol.PASSWORD, yyline, (int) yychar, yytext());
          }
          // fall through
          case 107:
            break;
          case 38: {
            yychar += 7;
            System.out.println(yytext());
            return new Symbol(symbol.VERSION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 108:
            break;
          case 39: {
            yychar += 9;
            System.out.println(yytext());
            return new Symbol(symbol.ID_TRIVIA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 109:
            break;
          case 40: {
            yychar += 9;
            System.out.println(yytext());
            return new Symbol(symbol.RESPUESTA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 110:
            break;
          case 41: {
            yychar += 1;
            System.out.println(yytext());
            return new Symbol(symbol.IGUAL, yyline, (int) yychar, yytext());
          }
          // fall through
          case 111:
            break;
          case 42: {
            yychar += 1;
            System.out.println(yytext());
            ;
            return new Symbol(symbol.FECHA_CREACION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 112:
            break;
          case 43: {
            yychar += 4;
            System.out.println(yytext());
            return new Symbol(symbol.AREA_TEXTO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 113:
            break;
          case 44: {
            yychar += 11;
            System.out.println(yytext());
            return new Symbol(symbol.CAMPO_TEXTO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 114:
            break;
          case 45: {
            yychar += 11;
            System.out.println(yytext());
            return new Symbol(symbol.INSTITUCION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 115:
            break;
          case 46: {
            yychar += 12;
            System.out.println(yytext());
            return new Symbol(symbol.NUEVA_TRIVIA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 116:
            break;
          case 47: {
            yychar += 13;
            System.out.println(yytext());
            return new Symbol(symbol.DATOS_USUARIO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 117:
            break;
          case 48: {
            yychar += 13;
            System.out.println(yytext());
            return new Symbol(symbol.LOGIN_USUARIO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 118:
            break;
          case 49: {
            yychar += 14;
            System.out.println(yytext());
            return new Symbol(symbol.TEXTO_VISIBLE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 119:
            break;
          case 50: {
            yychar += 13;
            System.out.println(yytext());
            return new Symbol(symbol.USUARIO_NUEVO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 120:
            break;
          case 51: {
            yychar += 14;
            System.out.println(yytext());
            return new Symbol(symbol.FECHA_CREACION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 121:
            break;
          case 52: {
            yychar += 14;
            System.out.println(yytext());
            return new Symbol(symbol.NUEVO_PASSWORD, yyline, (int) yychar, yytext());
          }
          // fall through
          case 122:
            break;
          case 53: {
            yychar += 15;
            System.out.println(yytext());
            return new Symbol(symbol.ELIMINAR_TRIVIA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 123:
            break;
          case 54: {
            yychar += 15;
            System.out.println(yytext());
            return new Symbol(symbol.TIEMPO_PREGUNTA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 124:
            break;
          case 55: {
            yychar += 15;
            System.out.println(yytext());
            return new Symbol(symbol.USUARIO_ANTIGUO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 125:
            break;
          case 56: {
            yychar += 16;
            System.out.println(yytext());
            return new Symbol(symbol.ELIMINAR_USUARIO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 126:
            break;
          case 57: {
            yychar += 16;
            System.out.println(yytext());
            return new Symbol(symbol.MODIFICAR_TRIVIA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 127:
            break;
          case 58: {
            yychar += 16;
            System.out.println(yytext());
            return new Symbol(symbol.USUARIO_CREACION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 128:
            break;
          case 59: {
            yychar += 17;
            System.out.println(yytext());
            return new Symbol(symbol.MODIFICAR_USUARIO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 129:
            break;
          case 60: {
            yychar += 17;
            System.out.println(yytext());
            return new Symbol(symbol.PARAMETROS_TRIVIA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 130:
            break;
          case 61: {
            yychar += 18;
            System.out.println(yytext());
            return new Symbol(symbol.AGREGAR_COMPONENTE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 131:
            break;
          case 62: {
            yychar += 18;
            System.out.println(yytext());
            return new Symbol(symbol.FECHA_MODIFICACION, yyline, (int) yychar, yytext());
          }
          // fall through
          case 132:
            break;
          case 63: {
            yychar += 18;
            System.out.println(yytext());
            return new Symbol(symbol.REALIZAR_SOLICITUD, yyline, (int) yychar, yytext());
          }
          // fall through
          case 133:
            break;
          case 64: {
            yychar += 19;
            System.out.println(yytext());
            return new Symbol(symbol.ELIMINAR_COMPONENTE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 134:
            break;
          case 65: {
            yychar += 20;
            System.out.println(yytext());
            return new Symbol(symbol.MODIFICAR_COMPONENTE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 135:
            break;
          case 66: {
            yychar += 20;
            System.out.println(yytext());
            return new Symbol(symbol.REALIZAR_SOLICITUDES, yyline, (int) yychar, yytext());
          }
          // fall through
          case 136:
            break;
          case 67: {
            yychar += 21;
            System.out.println(yytext());
            return new Symbol(symbol.PARAMETROS_COMPONENTE, yyline, (int) yychar, yytext());
          }
          // fall through
          case 137:
            break;
          case 68: {
            yychar += 23;
            System.out.println(yytext());
            return new Symbol(symbol.FIN_SOLICITUD_REALIZADA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 138:
            break;
          case 69: {
            yychar += 13;
            System.out.println(yytext());
            return new Symbol(symbol.USUARIO_NUEVO, yyline, (int) yychar, yytext());
          }
          // fall through
          case 139:
            break;
          case 70: {
            yychar += 25;
            System.out.println("fin sr lexer: " + yytext());
            return new Symbol(symbol.FIN_SOLICITUDES_REALIZADA, yyline, (int) yychar, yytext());
          }
          // fall through
          case 140:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

}
