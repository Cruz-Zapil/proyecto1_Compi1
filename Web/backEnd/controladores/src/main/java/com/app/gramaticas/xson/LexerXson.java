// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerXson.lex

package com.app.gramaticas.xson;

import java_cup.runtime.Symbol;

/* Archivo Lexer.flex */


@SuppressWarnings("fallthrough")
public class LexerXson implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\0\1\7\1\10\6\0\1\11\1\7\2\0"+
    "\1\12\1\13\10\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\33\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\33\1\51\1\52\1\0\1\53\1\0"+
    "\1\54\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\33\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\33\1\51\1\55\1\56\1\57\7\0"+
    "\1\3\252\0\2\60\115\0\1\61\u01a8\0\2\3\u0100\0"+
    "\1\62\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\20\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\0\1\20\2\0\1\21\2\0"+
    "\1\22\1\23\1\0\12\22\1\0\1\24\14\22\1\0"+
    "\1\22\1\0\1\22\1\24\1\0\1\13\1\0\1\21"+
    "\3\0\11\22\1\0\4\22\4\0\2\22\1\0\7\22"+
    "\1\0\3\22\1\0\4\22\2\0\1\22\1\0\1\22"+
    "\5\0\5\22\1\0\4\22\1\0\3\22\4\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\1\22\1\0\3\22"+
    "\1\0\2\22\1\0\1\22\1\0\2\22\1\0\1\25"+
    "\3\22\2\0\1\22\1\0\1\22\1\0\1\26\2\0"+
    "\1\27\1\22\1\0\2\22\1\0\2\30\1\22\1\31"+
    "\1\22\1\0\1\22\1\0\2\22\2\32\3\0\1\22"+
    "\1\0\1\22\1\0\1\22\1\0\1\22\1\0\4\22"+
    "\1\0\2\22\1\0\2\33\1\22\1\0\1\22\1\0"+
    "\3\22\2\0\1\22\1\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\2\0\1\22\3\0"+
    "\2\34\1\22\2\0\1\22\1\0\1\35\2\0\1\22"+
    "\1\0\2\22\1\0\1\22\1\0\1\22\2\0\1\22"+
    "\2\36\1\0\1\22\1\0\1\22\3\0\1\22\2\0"+
    "\1\22\1\0\1\22\1\0\1\22\3\0\1\37\1\0"+
    "\1\37\1\0\1\22\2\0\1\22\3\0\1\22\1\0"+
    "\2\22\1\0\1\22\1\0\1\22\3\0\2\40\1\22"+
    "\6\0\2\41\2\42\1\0\1\22\5\0\1\22\2\0"+
    "\1\22\3\0\2\43\1\22\2\44\1\22\1\0\1\22"+
    "\4\0\1\45\12\0\1\46\1\22\2\0\1\22\3\0"+
    "\1\22\1\0\2\47\5\0\1\50\2\0\1\51\10\0"+
    "\1\22\5\0\1\22\11\0\1\52\7\0\2\53\32\0"+
    "\1\54\13\0\1\55\6\0\1\56\7\0\1\57\3\0"+
    "\1\60\5\0\1\61\6\0\1\62\11\0\1\63\12\0"+
    "\1\64\1\65\4\0\1\66\4\0\1\67\4\0\1\70"+
    "\7\0\1\71\1\0\1\72\2\0\1\73\1\0\1\74"+
    "\4\0\1\75\1\0\1\76\10\0\1\77\1\0\1\100"+
    "\3\0\1\101\5\0\1\102\2\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\231\0\314\0\377\0\u0132"+
    "\0\63\0\u0165\0\63\0\u0198\0\63\0\u01cb\0\u01fe\0\u0231"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\63\0\63"+
    "\0\63\0\63\0\u052e\0\u0561\0\63\0\u0594\0\377\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\63\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\146\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u0660\0\u1eae"+
    "\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\63\0\u2079\0\u20ac\0\63\0\u20df\0\u2112\0\u2145\0\u2178"+
    "\0\u21ab\0\u0660\0\63\0\u21de\0\u0660\0\u2211\0\u2244\0\u2277"+
    "\0\u22aa\0\u22dd\0\u2310\0\u0660\0\63\0\u2343\0\u2376\0\u23a9"+
    "\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9"+
    "\0\u0660\0\63\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u0660"+
    "\0\63\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u0660\0\u2dd2"+
    "\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a"+
    "\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u0660\0\63\0\u3069\0\u309c"+
    "\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234"+
    "\0\u3267\0\u329a\0\u32cd\0\u3300\0\u3333\0\u3366\0\u3399\0\u33cc"+
    "\0\u0660\0\u33ff\0\63\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696"+
    "\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8\0\u37fb\0\u382e"+
    "\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960\0\u3993\0\u0660"+
    "\0\63\0\u0660\0\63\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u3a92"+
    "\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a"+
    "\0\u3c5d\0\u0660\0\63\0\u3c90\0\u0660\0\63\0\u3cc3\0\u3cf6"+
    "\0\u3d29\0\u3d5c\0\u3d8f\0\u3dc2\0\u3df5\0\63\0\u3e28\0\u3e5b"+
    "\0\u3e8e\0\u3ec1\0\u3ef4\0\u3f27\0\u3f5a\0\u3f8d\0\u3fc0\0\u3ff3"+
    "\0\63\0\u4026\0\u4059\0\u408c\0\u40bf\0\u40f2\0\u4125\0\u4158"+
    "\0\u418b\0\u41be\0\u0660\0\63\0\u41f1\0\u4224\0\u4257\0\u428a"+
    "\0\u42bd\0\63\0\u42f0\0\u4323\0\63\0\u4356\0\u4389\0\u43bc"+
    "\0\u43ef\0\u4422\0\u4455\0\u4488\0\u44bb\0\u44ee\0\u4521\0\u4554"+
    "\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9\0\u46ec"+
    "\0\u471f\0\u4752\0\u4785\0\u47b8\0\u47eb\0\63\0\u481e\0\u4851"+
    "\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950\0\u0660\0\63\0\u4983"+
    "\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u4ab5\0\u4ae8\0\u4b1b"+
    "\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3"+
    "\0\u4ce6\0\u4d19\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b"+
    "\0\u4e7e\0\63\0\u4eb1\0\u4ee4\0\u4f17\0\u4f4a\0\u4f7d\0\u4fb0"+
    "\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\63\0\u50e2\0\u5115"+
    "\0\u5148\0\u517b\0\u51ae\0\u51e1\0\63\0\u5214\0\u5247\0\u527a"+
    "\0\u52ad\0\u52e0\0\u5313\0\u5346\0\63\0\u5379\0\u53ac\0\u53df"+
    "\0\63\0\u5412\0\u5445\0\u5478\0\u54ab\0\u54de\0\63\0\u5511"+
    "\0\u5544\0\u5577\0\u55aa\0\u55dd\0\u5610\0\63\0\u5643\0\u5676"+
    "\0\u56a9\0\u56dc\0\u570f\0\u5742\0\u5775\0\u57a8\0\u57db\0\63"+
    "\0\u580e\0\u5841\0\u5874\0\u58a7\0\u58da\0\u590d\0\u5940\0\u5973"+
    "\0\u59a6\0\u59d9\0\63\0\63\0\u5a0c\0\u5a3f\0\u5a72\0\u5aa5"+
    "\0\63\0\u5ad8\0\u5b0b\0\u5b3e\0\u5b71\0\63\0\u5ba4\0\u5bd7"+
    "\0\u5c0a\0\u5c3d\0\63\0\u5c70\0\u5ca3\0\u5cd6\0\u5d09\0\u5d3c"+
    "\0\u5d6f\0\u5da2\0\63\0\u5dd5\0\63\0\u5e08\0\u5e3b\0\63"+
    "\0\u5e6e\0\63\0\u5ea1\0\u5ed4\0\u5f07\0\u5f3a\0\u5f6d\0\u5fa0"+
    "\0\63\0\u5fd3\0\u6006\0\u6039\0\u606c\0\u609f\0\u60d2\0\u6105"+
    "\0\u6138\0\63\0\u616b\0\63\0\u619e\0\u61d1\0\u6204\0\63"+
    "\0\u6237\0\u626a\0\u629d\0\u62d0\0\u6303\0\63\0\u6336\0\u6369"+
    "\0\63\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\3\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\20\1\25\2\20"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\20\1\34"+
    "\1\35\1\36\3\20\1\37\1\40\1\7\1\41\1\2"+
    "\1\42\1\43\2\2\141\0\1\44\24\0\1\45\55\0"+
    "\1\46\56\0\1\47\2\0\3\50\5\0\30\50\2\0"+
    "\1\47\32\0\1\51\12\0\1\52\35\0\3\12\5\0"+
    "\30\53\16\0\1\54\125\0\1\55\24\0\3\53\5\0"+
    "\6\53\1\56\11\53\1\57\7\53\4\0\1\44\16\0"+
    "\3\53\5\0\30\53\4\0\1\44\16\0\3\53\5\0"+
    "\1\60\6\53\1\61\3\53\1\62\2\53\1\63\11\53"+
    "\4\0\1\44\16\0\3\53\5\0\1\64\27\53\4\0"+
    "\1\44\16\0\3\53\5\0\13\53\1\65\14\53\4\0"+
    "\1\44\16\0\3\53\5\0\4\53\1\66\3\53\1\67"+
    "\17\53\4\0\1\44\1\0\1\70\14\0\3\53\5\0"+
    "\3\53\1\71\11\53\1\72\12\53\4\0\1\44\16\0"+
    "\3\53\5\0\16\53\1\73\11\53\4\0\1\44\16\0"+
    "\3\53\5\0\16\53\1\74\11\53\4\0\1\44\16\0"+
    "\3\53\5\0\16\53\1\75\4\53\1\76\4\53\4\0"+
    "\1\44\16\0\3\53\5\0\17\53\1\77\10\53\4\0"+
    "\1\44\16\0\3\53\5\0\1\100\27\53\4\0\1\44"+
    "\16\0\3\53\5\0\1\101\3\53\1\102\23\53\4\0"+
    "\1\44\16\0\3\53\5\0\4\53\1\103\3\53\1\104"+
    "\7\53\1\105\7\53\4\0\1\44\1\0\1\106\14\0"+
    "\3\53\5\0\21\53\1\107\6\53\4\0\1\44\2\0"+
    "\1\110\13\0\3\53\5\0\4\53\1\111\23\53\4\0"+
    "\1\44\31\0\1\112\11\0\1\113\27\0\1\114\15\0"+
    "\30\114\11\0\2\115\2\0\57\115\7\0\1\116\2\0"+
    "\3\50\5\0\30\50\2\0\1\116\30\0\1\117\100\0"+
    "\1\120\34\0\3\53\5\0\30\53\54\0\1\121\15\0"+
    "\1\121\13\0\3\53\5\0\20\53\1\122\7\53\23\0"+
    "\3\53\5\0\4\53\1\123\23\53\23\0\3\53\5\0"+
    "\14\53\1\124\13\53\23\0\3\53\5\0\4\53\1\125"+
    "\23\53\23\0\3\53\5\0\1\126\27\53\23\0\3\53"+
    "\5\0\13\53\1\127\1\130\13\53\23\0\3\53\5\0"+
    "\22\53\1\131\5\53\23\0\3\53\5\0\10\53\1\132"+
    "\17\53\6\0\1\133\14\0\3\53\5\0\2\53\1\134"+
    "\25\53\23\0\3\53\5\0\2\53\1\135\10\53\1\136"+
    "\1\53\1\137\12\53\35\0\1\140\10\0\1\141\1\0"+
    "\1\142\35\0\3\53\5\0\30\53\2\0\1\143\20\0"+
    "\3\53\5\0\3\53\1\144\15\53\1\145\6\53\7\0"+
    "\1\146\13\0\3\53\5\0\6\53\1\147\21\53\23\0"+
    "\3\53\5\0\3\53\1\150\24\53\23\0\3\53\5\0"+
    "\14\53\1\151\13\53\23\0\3\53\5\0\4\53\1\152"+
    "\23\53\23\0\3\53\5\0\2\53\1\153\25\53\23\0"+
    "\3\53\5\0\20\53\1\154\1\155\6\53\7\0\1\156"+
    "\13\0\3\53\5\0\3\53\1\157\24\53\23\0\3\53"+
    "\5\0\1\160\20\53\1\161\6\53\7\0\1\162\13\0"+
    "\3\53\5\0\14\53\1\163\11\53\1\164\1\53\23\0"+
    "\3\53\5\0\4\53\1\165\23\53\23\0\3\53\5\0"+
    "\10\53\1\166\17\53\6\0\1\167\30\0\1\170\46\0"+
    "\3\53\5\0\23\53\1\171\4\53\56\0\1\172\27\0"+
    "\3\53\5\0\20\53\1\173\7\53\65\0\1\143\33\0"+
    "\1\174\15\0\1\146\15\0\1\146\13\0\1\175\57\0"+
    "\1\116\44\0\1\116\51\0\1\176\15\0\1\176\45\0"+
    "\1\177\56\0\1\200\34\0\3\53\5\0\4\53\1\201"+
    "\23\53\23\0\3\53\5\0\1\202\27\53\23\0\3\53"+
    "\5\0\17\53\1\203\10\53\23\0\3\53\5\0\2\53"+
    "\1\204\25\53\23\0\3\53\5\0\21\53\1\205\6\53"+
    "\7\0\1\206\13\0\3\53\5\0\23\53\1\207\4\53"+
    "\23\0\3\53\5\0\1\53\1\210\26\53\23\0\3\53"+
    "\5\0\16\53\1\211\11\53\23\0\3\53\5\0\14\53"+
    "\1\212\13\53\47\0\1\213\36\0\3\53\5\0\7\53"+
    "\1\214\20\53\23\0\3\53\5\0\7\53\1\215\20\53"+
    "\23\0\3\53\5\0\1\216\27\53\23\0\3\53\5\0"+
    "\30\53\2\0\1\217\37\0\1\220\53\0\1\221\114\0"+
    "\1\217\52\0\1\222\30\0\3\53\5\0\10\53\1\223"+
    "\17\53\6\0\1\224\14\0\3\53\5\0\22\53\1\225"+
    "\5\53\55\0\1\226\30\0\3\53\5\0\10\53\1\227"+
    "\17\53\6\0\1\230\14\0\3\53\5\0\10\53\1\231"+
    "\17\53\6\0\1\232\14\0\3\53\5\0\1\53\1\233"+
    "\26\53\23\0\3\53\5\0\24\53\1\234\3\53\23\0"+
    "\3\53\5\0\10\53\1\235\17\53\6\0\1\236\14\0"+
    "\3\53\5\0\1\237\27\53\23\0\3\53\5\0\21\53"+
    "\1\240\6\53\7\0\1\241\44\0\1\241\15\0\1\241"+
    "\13\0\3\53\5\0\10\53\1\242\17\53\6\0\1\243"+
    "\14\0\3\53\5\0\13\53\1\244\14\53\23\0\3\53"+
    "\5\0\17\53\1\245\10\53\52\0\1\246\33\0\3\53"+
    "\5\0\1\247\27\53\23\0\3\53\5\0\22\53\1\250"+
    "\5\53\23\0\3\53\5\0\14\53\1\251\13\53\23\0"+
    "\3\53\5\0\24\53\1\252\3\53\57\0\1\253\52\0"+
    "\1\254\36\0\3\53\5\0\1\255\27\53\33\0\1\256"+
    "\52\0\3\53\5\0\21\53\1\257\6\53\7\0\1\260"+
    "\33\0\1\224\25\0\1\224\10\0\1\261\102\0\1\262"+
    "\60\0\1\263\75\0\1\264\35\0\3\53\5\0\6\53"+
    "\1\265\21\53\23\0\3\53\5\0\30\53\2\0\1\266"+
    "\20\0\3\53\5\0\16\53\1\267\11\53\23\0\3\53"+
    "\5\0\12\53\1\270\15\53\10\0\1\271\12\0\3\53"+
    "\5\0\4\53\1\272\23\53\37\0\1\273\46\0\3\53"+
    "\5\0\14\53\1\274\13\53\23\0\3\53\5\0\16\53"+
    "\1\275\11\53\23\0\3\53\5\0\21\53\1\276\6\53"+
    "\7\0\1\277\13\0\3\53\5\0\10\53\1\300\17\53"+
    "\6\0\1\301\34\0\1\301\25\0\1\301\14\0\3\53"+
    "\5\0\1\302\27\53\23\0\3\53\5\0\4\53\1\303"+
    "\23\53\23\0\3\53\5\0\21\53\1\304\6\53\7\0"+
    "\1\305\44\0\1\306\15\0\1\306\27\0\1\307\77\0"+
    "\1\305\15\0\1\305\43\0\1\310\32\0\3\53\5\0"+
    "\2\53\1\311\25\53\35\0\1\312\50\0\3\53\5\0"+
    "\10\53\1\313\17\53\6\0\1\314\34\0\1\314\25\0"+
    "\1\314\14\0\3\53\5\0\15\53\1\315\12\53\50\0"+
    "\1\316\35\0\3\53\5\0\5\53\1\317\22\53\40\0"+
    "\1\320\45\0\3\53\5\0\20\53\1\321\7\53\23\0"+
    "\3\53\5\0\1\322\15\53\1\323\11\53\23\0\3\53"+
    "\5\0\16\53\1\324\11\53\51\0\1\325\34\0\3\53"+
    "\5\0\14\53\1\326\13\53\23\0\3\53\5\0\25\53"+
    "\1\327\2\53\60\0\1\330\25\0\3\53\5\0\16\53"+
    "\1\331\11\53\51\0\1\332\34\0\3\53\5\0\10\53"+
    "\1\333\17\53\6\0\1\334\14\0\3\53\5\0\23\53"+
    "\1\335\4\53\56\0\1\336\27\0\3\53\5\0\16\53"+
    "\1\337\11\53\23\0\3\53\5\0\17\53\1\340\10\53"+
    "\23\0\3\53\5\0\10\53\1\341\17\53\6\0\1\342"+
    "\34\0\1\342\25\0\1\342\43\0\1\343\33\0\3\53"+
    "\5\0\20\53\1\344\7\53\53\0\1\345\32\0\3\53"+
    "\5\0\10\53\1\346\17\53\6\0\1\347\34\0\1\347"+
    "\25\0\1\347\37\0\1\350\47\0\1\351\52\0\3\53"+
    "\5\0\1\352\27\53\55\0\1\353\30\0\3\53\5\0"+
    "\30\53\2\0\1\354\20\0\3\53\5\0\1\53\1\355"+
    "\26\53\34\0\1\356\51\0\3\53\5\0\15\53\1\357"+
    "\12\53\23\0\3\53\5\0\30\53\2\0\1\360\62\0"+
    "\1\360\20\0\3\53\5\0\15\53\1\361\12\53\50\0"+
    "\1\362\35\0\3\53\5\0\30\53\2\0\1\363\20\0"+
    "\3\53\5\0\20\53\1\364\7\53\51\0\1\365\64\0"+
    "\1\366\52\0\1\367\25\0\1\367\14\0\3\53\5\0"+
    "\4\53\1\370\23\53\37\0\1\371\46\0\3\53\5\0"+
    "\22\53\1\372\5\53\55\0\1\373\30\0\3\53\5\0"+
    "\30\53\2\0\1\374\62\0\1\374\20\0\3\53\5\0"+
    "\10\53\1\375\17\53\6\0\1\376\34\0\1\376\25\0"+
    "\1\376\14\0\3\53\5\0\4\53\1\377\23\53\23\0"+
    "\3\53\5\0\30\53\2\0\1\u0100\20\0\3\53\5\0"+
    "\30\53\2\0\1\u0101\20\0\3\53\5\0\15\53\1\u0102"+
    "\12\53\50\0\1\u0103\35\0\3\53\5\0\4\53\1\u0104"+
    "\23\53\23\0\3\53\5\0\16\53\1\u0105\11\53\51\0"+
    "\1\u0106\34\0\3\53\5\0\27\53\1\u0107\62\0\1\u0108"+
    "\23\0\3\53\5\0\4\53\1\u0109\23\53\37\0\1\u010a"+
    "\46\0\3\53\5\0\30\53\2\0\1\u010b\20\0\3\53"+
    "\5\0\16\53\1\u010c\11\53\23\0\3\53\5\0\1\u010d"+
    "\27\53\33\0\1\u010e\100\0\1\u010f\34\0\3\53\5\0"+
    "\10\53\1\u0110\17\53\6\0\1\u0111\34\0\1\u0111\25\0"+
    "\1\u0111\14\0\3\53\5\0\16\53\1\u0112\11\53\51\0"+
    "\1\u0113\50\0\1\u0114\77\0\1\u0115\15\0\1\u0115\13\0"+
    "\3\53\5\0\20\53\1\u0116\7\53\37\0\1\u0117\100\0"+
    "\1\u0118\30\0\3\53\5\0\16\53\1\u0119\11\53\51\0"+
    "\1\u011a\34\0\3\53\5\0\1\u011b\27\53\56\0\1\u011c"+
    "\27\0\3\53\5\0\1\u011d\27\53\33\0\1\u011e\64\0"+
    "\1\u011f\11\0\1\u0120\36\0\3\53\5\0\16\53\1\u0121"+
    "\11\53\46\0\1\u0122\65\0\1\u0123\70\0\1\u0124\26\0"+
    "\3\53\5\0\23\53\1\u0125\4\53\56\0\1\u0126\62\0"+
    "\1\u0127\27\0\3\53\5\0\2\53\1\u0128\25\53\35\0"+
    "\1\u0129\102\0\1\u012a\57\0\1\u012b\33\0\3\53\5\0"+
    "\4\53\1\u012c\23\53\37\0\1\u012d\46\0\3\53\5\0"+
    "\22\53\1\u012e\5\53\23\0\3\53\5\0\20\53\1\u012f"+
    "\7\53\53\0\1\u0130\32\0\3\53\5\0\1\u0131\27\53"+
    "\33\0\1\u0132\52\0\3\53\5\0\21\53\1\u0133\6\53"+
    "\7\0\1\u0134\44\0\1\u0134\15\0\1\u0134\47\0\1\u0135"+
    "\26\0\3\53\5\0\30\53\2\0\1\u0136\62\0\1\u0136"+
    "\20\0\3\53\5\0\16\53\1\u0137\11\53\51\0\1\u0138"+
    "\34\0\3\53\5\0\15\53\1\u0139\12\53\50\0\1\u013a"+
    "\66\0\1\u013b\15\0\1\u013b\27\0\1\u013c\46\0\3\53"+
    "\5\0\30\53\2\0\1\u013d\56\0\1\u013e\40\0\1\u013f"+
    "\46\0\3\53\5\0\26\53\1\u0140\1\53\61\0\1\u0141"+
    "\24\0\3\53\5\0\21\53\1\u0142\6\53\7\0\1\u0143"+
    "\44\0\1\u0144\15\0\1\u0144\13\0\3\53\5\0\20\53"+
    "\1\u0145\7\53\53\0\1\u0146\62\0\1\u0147\60\0\1\u0148"+
    "\54\0\1\u0149\25\0\1\u0149\34\0\1\u014a\25\0\1\u014a"+
    "\14\0\3\53\5\0\2\53\1\u014b\25\53\35\0\1\u014c"+
    "\101\0\1\u014d\15\0\1\u014d\13\0\3\53\5\0\1\u014e"+
    "\27\53\33\0\1\u014f\102\0\1\u0150\42\0\1\u0151\52\0"+
    "\3\53\5\0\21\53\1\u0152\6\53\7\0\1\u0153\44\0"+
    "\1\u0153\15\0\1\u0153\13\0\3\53\5\0\20\53\1\u0154"+
    "\7\53\23\0\3\53\5\0\3\53\1\u0155\24\53\36\0"+
    "\1\u0156\47\0\3\53\5\0\20\53\1\u0157\7\53\53\0"+
    "\1\u0158\32\0\3\53\5\0\22\53\1\u0159\5\53\55\0"+
    "\1\u015a\50\0\1\u015b\25\0\1\u015b\43\0\1\u015c\33\0"+
    "\3\53\5\0\30\53\2\0\1\u015d\62\0\1\u015d\20\0"+
    "\3\53\2\0\1\u015e\2\0\30\53\30\0\1\u015e\106\0"+
    "\1\u015f\15\0\1\u015f\36\0\1\u0160\51\0\1\u0161\102\0"+
    "\1\u0162\66\0\1\u0163\57\0\1\u0164\27\0\3\53\5\0"+
    "\30\53\2\0\1\u0165\62\0\1\u0165\34\0\1\u0166\61\0"+
    "\1\u0167\61\0\1\u0168\60\0\1\u0169\52\0\3\53\5\0"+
    "\10\53\1\u016a\17\53\6\0\1\u016b\34\0\1\u016b\25\0"+
    "\1\u016b\47\0\1\u016c\27\0\3\53\5\0\20\53\1\u016d"+
    "\7\53\53\0\1\u016e\52\0\1\u016f\25\0\1\u016f\45\0"+
    "\1\u0170\15\0\1\u0170\13\0\3\53\5\0\16\53\1\u0171"+
    "\11\53\23\0\3\53\5\0\30\53\2\0\1\u0172\62\0"+
    "\1\u0172\20\0\3\53\5\0\1\u0173\27\53\33\0\1\u0174"+
    "\103\0\1\u0175\15\0\1\u0175\43\0\1\u0176\42\0\1\u0177"+
    "\1\0\1\u0178\12\0\1\u0179\42\0\1\u017a\71\0\1\u017b"+
    "\74\0\1\u017c\62\0\1\u017d\66\0\1\u017e\40\0\1\u017f"+
    "\64\0\1\u0180\17\0\1\u0181\1\u0182\37\0\1\u0183\72\0"+
    "\1\u0184\25\0\1\u0184\34\0\1\u0185\25\0\1\u0185\14\0"+
    "\3\53\5\0\16\53\1\u0186\11\53\51\0\1\u0187\44\0"+
    "\1\u0188\52\0\3\53\5\0\30\53\2\0\1\u0189\62\0"+
    "\1\u0189\54\0\1\u018a\57\0\1\u018b\15\0\1\u018b\13\0"+
    "\3\53\5\0\21\53\1\u018c\6\53\7\0\1\u018d\44\0"+
    "\1\u018e\15\0\1\u018e\33\0\1\u018f\25\0\1\u018f\30\0"+
    "\1\u0190\73\0\1\u0191\65\0\1\u0192\65\0\1\u0193\60\0"+
    "\1\u0194\15\0\1\u0194\37\0\1\u0195\64\0\1\u0196\64\0"+
    "\1\u0197\60\0\1\u0198\64\0\1\u0199\63\0\1\u019a\15\0"+
    "\1\u019a\25\0\1\u019b\65\0\1\u019c\77\0\1\u019d\30\0"+
    "\3\53\5\0\15\53\1\u019e\12\53\50\0\1\u019f\65\0"+
    "\1\u01a0\44\0\1\u01a1\17\0\1\u01a2\1\u01a3\47\0\1\u01a4"+
    "\25\0\1\u01a4\51\0\1\u01a5\25\0\3\53\5\0\30\53"+
    "\2\0\1\u01a6\62\0\1\u01a6\46\0\1\u01a7\45\0\1\u01a8"+
    "\67\0\1\u01a9\76\0\1\u01aa\44\0\1\u01ab\62\0\1\u01ac"+
    "\77\0\1\u01ad\15\0\1\u01ad\42\0\1\u01ae\53\0\1\u01af"+
    "\25\0\1\u01af\40\0\1\u01b0\56\0\1\u01b1\25\0\1\u01b1"+
    "\47\0\1\u01b2\47\0\1\u01b3\25\0\1\u01b3\34\0\1\u01b4"+
    "\25\0\1\u01b4\47\0\1\u01b5\47\0\1\u01b6\25\0\1\u01b6"+
    "\42\0\1\u01b7\64\0\1\u01b8\63\0\1\u01b9\15\0\1\u01b9"+
    "\23\0\1\u01ba\100\0\1\u01bb\46\0\1\u01bc\17\0\1\u01bd"+
    "\53\0\1\u01be\62\0\1\u01bf\72\0\1\u01c0\47\0\1\u01c1"+
    "\25\0\1\u01c1\24\0\1\u01c2\106\0\1\u01c3\61\0\1\u01c4"+
    "\55\0\1\u01c5\62\0\1\u01c6\63\0\1\u01c7\67\0\1\u01c8"+
    "\36\0\1\u01c9\100\0\1\u01ca\46\0\1\u01cb\63\0\1\u01cc"+
    "\75\0\1\u01cd\60\0\1\u01ce\56\0\1\u01cf\25\0\1\u01cf"+
    "\47\0\1\u01d0\57\0\1\u01d1\60\0\1\u01d2\64\0\1\u01d3"+
    "\52\0\1\u01d4\25\0\1\u01d4\30\0\1\u01d5\73\0\1\u01d6"+
    "\53\0\1\u01d7\56\0\1\u01d8\76\0\1\u01d9\65\0\1\u01da"+
    "\15\0\1\u01da\40\0\1\u01db\63\0\1\u01dc\54\0\1\u01dd"+
    "\25\0\1\u01dd\44\0\1\u01de\57\0\1\u01df\45\0\1\u01e0"+
    "\66\0\1\u01e1\25\0\1\u01e2\47\0\1\u01e3\67\0\1\u01e4"+
    "\36\0\1\u01e5\65\0\1\u01e6\73\0\1\u01e7\56\0\1\u01e8"+
    "\25\0\1\u01e8\26\0\1\u01e9\102\0\1\u01ea\63\0\1\u01eb"+
    "\47\0\1\u01ec\25\0\1\u01ec\47\0\1\u01ed\43\0\1\u01ee"+
    "\73\0\1\u01ef\45\0\1\u01f0\72\0\1\u01f1\25\0\1\u01f1"+
    "\26\0\1\u01f2\101\0\1\u01f3\15\0\1\u01f3\43\0\1\u01f4"+
    "\60\0\1\u01f5\54\0\1\u01f6\25\0\1\u01f6\44\0\1\u01f7"+
    "\61\0\1\u01f8\67\0\1\u01f9\46\0\1\u01fa\25\0\1\u01fa"+
    "\24\0\1\u01fb\100\0\1\u01fc\62\0\1\u01fd\44\0\1\u01fe"+
    "\77\0\1\u01ff\51\0\1\u0200\74\0\1\u0201\54\0\1\u0202"+
    "\25\0\1\u0202\56\0\1\u0203\34\0\1\u0204\73\0\1\u0205"+
    "\45\0\1\u0206\72\0\1\u0207\25\0\1\u0207\42\0\1\u0208"+
    "\54\0\1\u0209\25\0\1\u0209\46\0\1\u020a\55\0\1\u020b"+
    "\65\0\1\u020c\64\0\1\u020d\55\0\1\u020e\63\0\1\u020f"+
    "\64\0\1\u0210\42\0\1\u0211\66\0\1\u0212\74\0\1\u0213"+
    "\61\0\1\u0214\45\0\1\u0215\105\0\1\u0216\47\0\1\u0217"+
    "\25\0\1\u0217\30\0\1\u0218\100\0\1\u0219\55\0\1\u021a"+
    "\51\0\1\u021b\71\0\1\u021c\64\0\1\u021d\51\0\1\u021e"+
    "\61\0\1\u021f\75\0\1\u0220\50\0\1\u0221\56\0\1\u0222"+
    "\72\0\1\u0223\25\0\1\u0223\46\0\1\u0224\55\0\1\u0225"+
    "\51\0\1\u0226\110\0\1\u0227\43\0\1\u0228\76\0\1\u0229"+
    "\37\0\1\u022a\100\0\1\u022b\61\0\1\u022c\15\0\1\u022c"+
    "\40\0\1\u022d\55\0\1\u022e\25\0\1\u022e\24\0\1\u022f"+
    "\66\0\1\u0230\101\0\1\u0231\66\0\1\u0232\36\0\1\u0233"+
    "\63\0\1\u0234\56\0\1\u0235\62\0\1\u0236\106\0\1\u0237"+
    "\41\0\1\u0238\75\0\1\u0239\44\0\1\u023a\40\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25500];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\1\11\1\1\1\11\1\1\1\11"+
    "\21\1\4\11\1\1\1\0\1\11\2\0\1\1\2\0"+
    "\1\1\1\11\1\0\12\1\1\0\15\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\3\0\11\1"+
    "\1\0\4\1\4\0\2\1\1\0\7\1\1\0\3\1"+
    "\1\0\4\1\2\0\1\1\1\0\1\1\5\0\5\1"+
    "\1\0\4\1\1\0\3\1\4\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\4\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\11\2\0\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\3\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\3\1\2\0\1\1"+
    "\1\0\1\1\3\0\1\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\3\0\1\1\1\11\1\1"+
    "\2\0\1\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\11\1\0"+
    "\1\1\1\0\1\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\1\1\0\1\11\1\0"+
    "\1\1\2\0\1\1\3\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\3\0\3\1\6\0\1\1\1\11"+
    "\1\1\1\11\1\0\1\1\5\0\1\1\2\0\1\1"+
    "\3\0\1\1\1\11\2\1\1\11\1\1\1\0\1\1"+
    "\4\0\1\11\12\0\1\11\1\1\2\0\1\1\3\0"+
    "\1\1\1\0\1\1\1\11\5\0\1\11\2\0\1\11"+
    "\10\0\1\1\5\0\1\1\11\0\1\11\7\0\1\1"+
    "\1\11\32\0\1\11\13\0\1\11\6\0\1\11\7\0"+
    "\1\11\3\0\1\11\5\0\1\11\6\0\1\11\11\0"+
    "\1\11\12\0\2\11\4\0\1\11\4\0\1\11\4\0"+
    "\1\11\7\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\4\0\1\1\1\0\1\11\10\0\1\11\1\0"+
    "\1\11\3\0\1\11\5\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     int longitudToken=0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerXson(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symbol.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yychar+=1; System.out.println("Caracter no reconocido: " + yytext());
            }
          // fall through
          case 69: break;
          case 2:
            { yychar+=1; yyline++;
            }
          // fall through
          case 70: break;
          case 3:
            { yychar+=1 ;
            }
          // fall through
          case 71: break;
          case 4:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLAS, yyline, (int)yychar, yytext());
            }
          // fall through
          case 72: break;
          case 5:
            { yychar+=1 ; System.out.println(yytext())  ;  return new Symbol(symbol.COMA, yyline, (int)yychar, yytext());
            }
          // fall through
          case 73: break;
          case 6:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" numero : "+yytext());           return new Symbol(symbol.VALOR_NUMERO, yyline, (int)yychar ,yytext());
            }
          // fall through
          case 74: break;
          case 7:
            { yychar+=1 ; System.out.println(yytext())  ;  return new Symbol(symbol.DOS_PUNTOS, yyline, (int)yychar, yytext());
            }
          // fall through
          case 75: break;
          case 8:
            { yychar+=1;  System.out.println(yytext())  ; return new Symbol(symbol.INICIO_ETIQUETA, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 76: break;
          case 9:
            { yychar+=1;  System.out.println(yytext())  ; return new Symbol(symbol.FIN_ETIQUETA, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 77: break;
          case 10:
            { yychar+=1;  System.out.println(yytext())  ; return new Symbol(symbol.INTERROGACION, yyline, (int)yychar, yytext());
            }
          // fall through
          case 78: break;
          case 11:
            { longitudToken = yytext().length();  yychar+=longitudToken ;  System.out.println("opt "+yytext());  return new Symbol(symbol.OPTIONS,yyline, (int)yychar, yytext());
            }
          // fall through
          case 79: break;
          case 12:
            { yychar+=1 ; System.out.println(yytext())  ;  return new Symbol(symbol.CORCHETE_IZQ, yyline, (int)yychar, yytext());
            }
          // fall through
          case 80: break;
          case 13:
            { yychar+=1 ; System.out.println(yytext())  ;  return new Symbol(symbol.CORCHETE_DER, yyline, (int)yychar, yytext());
            }
          // fall through
          case 81: break;
          case 14:
            { yychar+=1 ; System.out.println(yytext())  ;  return new Symbol(symbol.LLAVE_IZQ, yyline, (int)yychar, yytext());
            }
          // fall through
          case 82: break;
          case 15:
            { yychar+=1 ; System.out.println(yytext())  ;  return new Symbol(symbol.LLAVE_DER, yyline, (int)yychar, yytext());
            }
          // fall through
          case 83: break;
          case 16:
            { yychar+=2;  System.out.println(yytext())  ; return new Symbol(symbol.FIN_SOLICITUD, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 84: break;
          case 17:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" Ids : "+yytext());              return new Symbol(symbol.IDS,yyline,(int)yychar, yytext());
            }
          // fall through
          case 85: break;
          case 18:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" valor de cadena : "+yytext());  return new Symbol(symbol.VALOR_CADENA,yyline,(int)yychar, yytext());
            }
          // fall through
          case 86: break;
          case 19:
            { yychar+=2;  System.out.println(yytext())  ; return new Symbol(symbol.INICIO_SOLICITUD, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 87: break;
          case 20:
            { yychar+=2  ; System.out.println(yytext())  ;    return new Symbol(symbol.ID, yyline, (int)yychar, yytext());
            }
          // fall through
          case 88: break;
          case 21:
            { yychar+=4    ; System.out.println(yytext());   return new Symbol(symbol.TEMA,yyline, (int)yychar, yytext());
            }
          // fall through
          case 89: break;
          case 22:
            { yychar+=3;  System.out.println("version1: "+yytext())  ; return new Symbol(symbol.VERSION1, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 90: break;
          case 23:
            { yychar+=4;  System.out.println(yytext())  ; return new Symbol(symbol.XSON, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 91: break;
          case 24:
            { yychar+=5  ; System.out.println(yytext())  ;    return new Symbol(symbol.CLASE, yyline, (int)yychar, yytext());
            }
          // fall through
          case 92: break;
          case 25:
            { yychar+=5  ; System.out.println(yytext())  ;    return new Symbol(symbol.COMBO, yyline, (int)yychar, yytext());
            }
          // fall through
          case 93: break;
          case 26:
            { yychar+=5  ; System.out.println(yytext())  ;    return new Symbol(symbol.FILAS, yyline, (int)yychar, yytext());
            }
          // fall through
          case 94: break;
          case 27:
            { yychar+=5  ; System.out.println(yytext())  ;    return new Symbol(symbol.RADIO, yyline, (int)yychar, yytext());
            }
          // fall through
          case 95: break;
          case 28:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.INDICE,yyline, (int)yychar, yytext());
            }
          // fall through
          case 96: break;
          case 29:
            { yychar+=6   ; System.out.println(yytext());  return new Symbol(symbol.NOMBRE,yyline, (int)yychar, yytext());
            }
          // fall through
          case 97: break;
          case 30:
            { yychar+=6  ; System.out.println(yytext())  ;    return new Symbol(symbol.TRIVIA, yyline, (int)yychar, yytext());
            }
          // fall through
          case 98: break;
          case 31:
            { yychar+=7  ; System.out.println(yytext())  ;    return new Symbol(symbol.FICHERO, yyline, (int)yychar, yytext());
            }
          // fall through
          case 99: break;
          case 32:
            { yychar+=7   ; System.out.println(yytext());  return new Symbol(symbol.USUARIO, yyline, (int)yychar, yytext());
            }
          // fall through
          case 100: break;
          case 33:
            { yychar+=8  ; System.out.println(yytext())  ;    return new Symbol(symbol.CHECKBOX, yyline, (int)yychar, yytext());
            }
          // fall through
          case 101: break;
          case 34:
            { yychar+=8  ; System.out.println(yytext())  ;    return new Symbol(symbol.COLUMNAS, yyline, (int)yychar, yytext());
            }
          // fall through
          case 102: break;
          case 35:
            { yychar+=8  ; System.out.println(yytext())  ;    return new Symbol(symbol.OPCIONES, yyline, (int)yychar, yytext());
            }
          // fall through
          case 103: break;
          case 36:
            { yychar+=8   ; System.out.println(yytext());  return new Symbol(symbol.PASSWORD,yyline, (int)yychar, yytext());
            }
          // fall through
          case 104: break;
          case 37:
            { yychar+=7;  System.out.println(yytext())  ; return new Symbol(symbol.VERSION, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 105: break;
          case 38:
            { yychar+=9    ; System.out.println(yytext());   return new Symbol(symbol.ID_TRIVIA,yyline, (int)yychar, yytext());
            }
          // fall through
          case 106: break;
          case 39:
            { yychar+=9  ; System.out.println(yytext())  ;    return new Symbol(symbol.RESPUESTA, yyline, (int)yychar, yytext());
            }
          // fall through
          case 107: break;
          case 40:
            { yychar+=1;  System.out.println(yytext())  ; return new Symbol(symbol.IGUAL, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 108: break;
          case 41:
            { yychar+=4  ; System.out.println(yytext())  ;    return new Symbol(symbol.AREA_TEXTO, yyline, (int)yychar, yytext());
            }
          // fall through
          case 109: break;
          case 42:
            { yychar+=11 ; System.out.println(yytext())  ;    return new Symbol(symbol.CAMPO_TEXTO, yyline, (int)yychar, yytext());
            }
          // fall through
          case 110: break;
          case 43:
            { yychar+=11  ; System.out.println(yytext());  return new Symbol(symbol.INSTITUCION,yyline, (int)yychar, yytext());
            }
          // fall through
          case 111: break;
          case 44:
            { yychar+=12   ; System.out.println(yytext());   return new Symbol(symbol.NUEVA_TRIVIA,yyline, (int)yychar, yytext());
            }
          // fall through
          case 112: break;
          case 45:
            { yychar+=13  ; System.out.println(yytext());  return new Symbol(symbol.DATOS_USUARIO ,yyline, (int)yychar, yytext());
            }
          // fall through
          case 113: break;
          case 46:
            { yychar+=13; System.out.println(yytext())  ; return new Symbol(symbol.LOGIN_USUARIO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 114: break;
          case 47:
            { yychar+=14 ; System.out.println(yytext())  ;    return new Symbol(symbol.TEXTO_VISIBLE, yyline, (int)yychar, yytext());
            }
          // fall through
          case 115: break;
          case 48:
            { yychar+=13 ; System.out.println(yytext()) ; return new Symbol(symbol.USUARIO_NUEVO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 116: break;
          case 49:
            { yychar+=14  ; System.out.println(yytext());  return new Symbol(symbol.FECHA_CREACION,yyline, (int)yychar, yytext());
            }
          // fall through
          case 117: break;
          case 50:
            { yychar+=14 ; System.out.println(yytext()) ; return new Symbol(symbol.NUEVO_PASSWORD,yyline, (int)yychar, yytext());
            }
          // fall through
          case 118: break;
          case 51:
            { yychar+=15 ; System.out.println(yytext()) ; return new Symbol(symbol.ELIMINAR_TRIVIA, yyline, (int)yychar, yytext());
            }
          // fall through
          case 119: break;
          case 52:
            { yychar+=15   ; System.out.println(yytext());   return new Symbol(symbol.TIEMPO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 120: break;
          case 53:
            { yychar+=15 ; System.out.println(yytext()) ; return new Symbol(symbol.USUARIO_ANTIGUO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 121: break;
          case 54:
            { yychar+=16 ; System.out.println(yytext()) ; return new Symbol(symbol.ELIMINAR_USUARIO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 122: break;
          case 55:
            { yychar+=16 ; System.out.println(yytext()) ; return new Symbol(symbol.MODIFICAR_TRIVIA,yyline, (int)yychar, yytext());
            }
          // fall through
          case 123: break;
          case 56:
            { yychar+=16   ; System.out.println(yytext());   return new Symbol(symbol.USUARIO_CREACION,yyline, (int)yychar, yytext());
            }
          // fall through
          case 124: break;
          case 57:
            { yychar+=17 ; System.out.println(yytext()) ; return new Symbol(symbol.MODIFICAR_USUARIO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 125: break;
          case 58:
            { yychar+=17   ; System.out.println(yytext());   return new Symbol(symbol.PARAMETROS_TRIVIA, yyline, (int)yychar, yytext());
            }
          // fall through
          case 126: break;
          case 59:
            { yychar+=18 ; System.out.println(yytext())  ;    return new Symbol(symbol.AGREGAR_COMPONENTE, yyline, (int)yychar, yytext());
            }
          // fall through
          case 127: break;
          case 60:
            { yychar+=18 ; System.out.println(yytext()) ; return new Symbol(symbol.FECHA_MODIFICACION,yyline, (int)yychar, yytext());
            }
          // fall through
          case 128: break;
          case 61:
            { yychar+=18; System.out.println(yytext()) ; return new Symbol(symbol.REALIZAR_SOLICITUD, yyline, (int)yychar, yytext());
            }
          // fall through
          case 129: break;
          case 62:
            { yychar+=19 ; System.out.println(yytext())  ;    return new Symbol(symbol.ELIMINAR_COMPONENTE, yyline, (int)yychar, yytext());
            }
          // fall through
          case 130: break;
          case 63:
            { yychar+=20 ; System.out.println(yytext())  ;    return new Symbol(symbol.MODIFICAR_COMPONENTE, yyline, (int)yychar, yytext());
            }
          // fall through
          case 131: break;
          case 64:
            { yychar+=20; System.out.println(yytext()) ; return new Symbol(symbol.REALIZAR_SOLICITUDES, yyline,  (int)yychar, yytext());
            }
          // fall through
          case 132: break;
          case 65:
            { yychar+=21 ; System.out.println(yytext())  ;    return new Symbol(symbol.PARAMETROS_COMPONENTE, yyline, (int)yychar, yytext());
            }
          // fall through
          case 133: break;
          case 66:
            { yychar+=23; System.out.println(yytext());  return new Symbol(symbol.FIN_SOLICITUD_REALIZADA  , yyline,  (int)yychar, yytext());
            }
          // fall through
          case 134: break;
          case 67:
            { yychar+=13  ; System.out.println(yytext());  return new Symbol(symbol.USUARIO_NUEVO,yyline, (int)yychar, yytext());
            }
          // fall through
          case 135: break;
          case 68:
            { yychar+=25; System.out.println("fin sr lexer: "+ yytext());  return new Symbol(symbol.FIN_SOLICITUDES_REALIZADA  , yyline,  (int)yychar, yytext());
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
